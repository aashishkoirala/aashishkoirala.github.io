<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>azure on Aashish Koirala</title><link>https://aashishkoirala.github.io/tags/azure/</link><description>Recent content in azure on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.github.io/tags/azure/index.xml" rel="self" type="application/rss+xml"/><item><title>An AWS Primer for Azure Developers</title><link>https://aashishkoirala.github.io/blog/tech/an-aws-primer-for-azure-developers/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/an-aws-primer-for-azure-developers/</guid><description>Even though AWS has been around for much longer, as is the norm for a lot of people coming from the .NET/Microsoft side of things, my cloud experience started with Azure. I got into AWS when I was a few years into Azure. I remember thinking at that point it would be nice to have something like this primer that would give me a very high-level introduction to AWS based on what I knew of Azure.</description></item><item><title>Working with Windows Containers in Kubernetes</title><link>https://aashishkoirala.github.io/blog/tech/working-with-windows-containers-in-kubernetes/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/working-with-windows-containers-in-kubernetes/</guid><description>Even though Docker was built atop Linux containers and that is the majority of Docker usage out there, Windows Containers have been a thing for a while now. They went mainstream in 2016, and one hopes &amp;ldquo;ready for primetime&amp;rdquo; with Windows Server 2019. Even though integration with Docker is getting tighter, if you are in the unfortunate position of having to use Windows Containers with Kubernetes, you are going to have issues.</description></item><item><title>Azure DevOps for CI and CD</title><link>https://aashishkoirala.github.io/blog/tech/azure-devops-for-ci-and-cd/</link><pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/azure-devops-for-ci-and-cd/</guid><description>I set up CI and CD for two of my applications using Azure DevOps. It was quite easy. Setting up the build pipeline is as simple as including a YAML file in your source repository. It then just comes down to knowing how the build YAML schema works. As far as the release (or deployment) pipeline is concerned, though, I could not find a similar method. I had to set it up through the Azure DevOps UI.</description></item><item><title>On Service Fabric, Kubernetes and Docker</title><link>https://aashishkoirala.github.io/blog/tech/on-service-fabric-kubernetes-and-docker/</link><pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/on-service-fabric-kubernetes-and-docker/</guid><description>UPDATE (Nov 13, 2019) My views on this have changed since I wrote this post. See this post for where I stand now.
Let us get Docker out of the way first. Microservices and containers are quite the hype these days. With hype comes misinformation and hysteria. A lot of people conflate the two (fortunately there are wise people out there to set us all straight). If you have done your due diligence and decided to go with microservices, you don&amp;rsquo;t have to go with containers.</description></item><item><title>An Azure Service Fabric Restarter in F#</title><link>https://aashishkoirala.github.io/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</link><pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</guid><description>Trying to get beyond just writing quick scripts here and there in F#, I went through functional design patterns targeted at building mainstream applications. Railway-oriented programming specifically stuck with me. I decided to try it along with some of the other core functional concepts such as projecting to other domains with map and bind operations. My first foray into this was applying it to, surprise, surprise, yet another quick script I had in place.</description></item><item><title>Moving to Azure PaaS and Service Fabric- Part 2</title><link>https://aashishkoirala.github.io/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/</link><pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/</guid><description>This is Part 2 of a two-part blog series:
Part 1 (Application- Services, Security and UI) Part 2 (this one; Database, Configuration, Logging, Caching, Service Bus, Emails, Tooling, Rollout) Database
We moved from our on-premises installation of SQL Server to the PaaS offering that is SQL on Azure. Other than the actual physical moving of the data, the additional challenge we had was that our system had a number of separate databases that were interconnected via synonyms.</description></item><item><title>Moving to Azure PaaS and Service Fabric- Part 1</title><link>https://aashishkoirala.github.io/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/</guid><description>This is Part 1 of a two-part blog series:
Part 1 (this one; Application- Services, Security and UI) Part 2 (Database, Configuration, Logging, Caching, Service Bus, Emails, Tooling, Rollout) It has been an action-packed year at work. We moved our entire platform in one fell swoop from on-premises to Azure PaaS (Platform as a Service). Since this was a big re-platforming effort that would incur regression testing across the entire set of applications, we took this opportunity to include a few technology upgrades in the process.</description></item></channel></rss>