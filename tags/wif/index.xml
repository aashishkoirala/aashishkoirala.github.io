<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wif on Aashish Koirala</title><link>https://aashishkoirala.com/tags/wif/</link><description>Recent content in Wif on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 10 Feb 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/wif/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing a WS-Federation Based STS using WIF</title><link>https://aashishkoirala.com/blog/tech/writing-a-ws-federation-based-sts-using-wif/</link><pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-a-ws-federation-based-sts-using-wif/</guid><description>&lt;p>Even though &lt;a href="https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language">SAML&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/WS-Security">WS-*&lt;/a> have started to be looked upon as the old guard of security protocols with the popularity of &lt;a href="http://oauth.net/2/">OAuth 2&lt;/a>, they are not without their merits. For one, they are &lt;a href="https://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/">inherently more secure than OAuth&lt;/a> (in fact, you need to rely on a separate underlying secure transport for OAuth to be considered secure- and if you are someone who believes &lt;a href="http://www.zdnet.com/article/how-the-nsa-and-your-boss-can-intercept-and-break-ssl/">SSL is broken&lt;/a>, then OAuth is practically insecure). It just so happens that their demerits are very visible to someone trying to implement or integrate them. OAuth, by contrast, is much simpler and easier to implement- and for most purposes, secure enough. If you have settled on &lt;a href="https://msdn.microsoft.com/en-us/library/bb498017.aspx">WS-Federation&lt;/a> as your protocol of choice, &lt;a href="https://msdn.microsoft.com/en-us/library/hh377151(v=vs.110).aspx">Windows Identity Foundation (WIF)&lt;/a> is most likely going to be your de-facto choice. While powerful, WIF as a library is not what one would call &amp;ldquo;easy to use&amp;rdquo;. If it&amp;rsquo;s cumbersome when you use it as a relying party, the complexity is ten-fold if you try to build a security token service (STS) based on it.&lt;/p></description></item></channel></rss>