<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on Aashish Koirala</title><link>https://aashishkoirala.github.io/tags/docker/</link><description>Recent content in docker on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>The Rise of Go</title><link>https://aashishkoirala.github.io/blog/tech/the-rise-of-go/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/the-rise-of-go/</guid><description>Recently, Go has seen a real uptick in popularity and adoption for a variety of different usages. It has been around for a while and has been continually improving. The purpose-built simplicity and extra focus on making concurrency easy and safe is part of it. The other part I like is the ease with which what you write becomes portable. These aspects especially make it a good fit to write infrastructure and tooling.</description></item><item><title>Working with Windows Containers in Kubernetes</title><link>https://aashishkoirala.github.io/blog/tech/working-with-windows-containers-in-kubernetes/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/working-with-windows-containers-in-kubernetes/</guid><description>Even though Docker was built atop Linux containers and that is the majority of Docker usage out there, Windows Containers have been a thing for a while now. They went mainstream in 2016, and one hopes &amp;ldquo;ready for primetime&amp;rdquo; with Windows Server 2019. Even though integration with Docker is getting tighter, if you are in the unfortunate position of having to use Windows Containers with Kubernetes, you are going to have issues.</description></item><item><title>Installing PFX Certificates in Docker Containers</title><link>https://aashishkoirala.github.io/blog/tech/installing-pfx-certificates-in-docker-containers/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/installing-pfx-certificates-in-docker-containers/</guid><description>Recently, I came across having to install PKCS12 certificate bundles (i.e. a PFX file with the certificate and private key included, protected with a password) on a Docker container. This is standard fare on normal Windows machines or on PaaS systems such as Azure App Service. Doing this on a container, though, proved to be tricky (perhaps with good reason as I mention later) - so tricky that I ended up writing my own tool to do it.</description></item><item><title>Running .NET Core Global Tools Without the SDK</title><link>https://aashishkoirala.github.io/blog/tech/running-dotnet-core-global-tools-without-the-sdk/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/running-dotnet-core-global-tools-without-the-sdk/</guid><description>.NET Core Global Tools are pretty neat. If you are targetting developers with the .NET Core SDK installed on their machines and need to ship CLI tools, your job is made immensely easier. It is just as easy as shipping a NuGet package. However, once you get used to building these things, it is easy to fall into the trap of treating this shipping mechanism as if it were Chocolatey (or apt-get, or yum, or what-have-you).</description></item><item><title>On Service Fabric, Kubernetes and Docker</title><link>https://aashishkoirala.github.io/blog/tech/on-service-fabric-kubernetes-and-docker/</link><pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/on-service-fabric-kubernetes-and-docker/</guid><description>UPDATE (Nov 13, 2019) My views on this have changed since I wrote this post. See this post for where I stand now.
Let us get Docker out of the way first. Microservices and containers are quite the hype these days. With hype comes misinformation and hysteria. A lot of people conflate the two (fortunately there are wise people out there to set us all straight). If you have done your due diligence and decided to go with microservices, you don&amp;rsquo;t have to go with containers.</description></item></channel></rss>