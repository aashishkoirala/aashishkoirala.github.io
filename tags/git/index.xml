<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Aashish Koirala</title><link>https://aashishkoirala.github.io/tags/git/</link><description>Recent content in git on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 07 Jan 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git- Rewriter of History</title><link>https://aashishkoirala.github.io/blog/tech/git-rewriter-of-history/</link><pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/git-rewriter-of-history/</guid><description>Undoubtedly one of the biggest advantages that Git provides is using rebasing to maintain a clean commit history. I find that I am using it a lot these days- primarily in three modes:
As part of pull (i.e. git pull -rebase) Interactive rebase to: 1) keep my own history clean when I am off working on a branch by myself, and 2) clean up a feature branch&amp;rsquo;s commit history before merging it into the mainstream Rebase my branch against a more mainstream branch before I merge onto it (i.</description></item></channel></rss>