<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>servicefabric on Aashish Koirala</title><link>https://aashishkoirala.com/tags/servicefabric/</link><description>Recent content in servicefabric on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/servicefabric/index.xml" rel="self" type="application/rss+xml"/><item><title>Revisiting Kubernetes vs. Service Fabric</title><link>https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/</guid><description>Since I wrote my initial post regarding Kubernetes and Service Fabric, a few things have happened:
Kubernetes had a chance to mature a lot more and also, needless to say, has sky-rocketed in adoption. Managed Kubernetes on the major cloud providers (AKS/EKS/GKE) has had a chance to mature a lot more. Adoption of Service Fabric is miniscule in comparison. Microsoft itself seems to be putting (wisely so) much of its firepower behind Kubernetes while Service Fabric sort-of just sits there on the side.</description></item><item><title>On Service Fabric, Kubernetes and Docker</title><link>https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/</link><pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/</guid><description>UPDATE (Nov 13, 2019) My views on this have changed since I wrote this post. See this post for where I stand now.
Let us get Docker out of the way first. Microservices and containers are quite the hype these days. With hype comes misinformation and hysteria. A lot of people conflate the two (fortunately there are wise people out there to set us all straight). If you have done your due diligence and decided to go with microservices, you don&amp;rsquo;t have to go with containers.</description></item><item><title>An Azure Service Fabric Restarter in F#</title><link>https://aashishkoirala.com/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</link><pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</guid><description>Trying to get beyond just writing quick scripts here and there in F#, I went through functional design patterns targeted at building mainstream applications. Railway-oriented programming specifically stuck with me. I decided to try it along with some of the other core functional concepts such as projecting to other domains with map and bind operations. My first foray into this was applying it to, surprise, surprise, yet another quick script I had in place.</description></item><item><title>Moving to Azure PaaS and Service Fabric- Part 2</title><link>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/</link><pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/</guid><description>This is Part 2 of a two-part blog series:
[Part 1https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/) (Application- Services, Security and UI) Part 2 (this one; Database, Configuration, Logging, Caching, Service Bus, Emails, Tooling, Rollout) Database
We moved from our on-premises installation of SQL Server to the PaaS offering that is SQL on Azure. Other than the actual physical moving of the data, the additional challenge we had was that our system had a number of separate databases that were interconnected via synonyms.</description></item><item><title>Moving to Azure PaaS and Service Fabric- Part 1</title><link>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/</guid><description>This is Part 1 of a two-part blog series:
Part 1 (this one; Application- Services, Security and UI) Part 2 (Database, Configuration, Logging, Caching, Service Bus, Emails, Tooling, Rollout) It has been an action-packed year at work. We moved our entire platform in one fell swoop from on-premises to Azure PaaS (Platform as a Service). Since this was a big re-platforming effort that would incur regression testing across the entire set of applications, we took this opportunity to include a few technology upgrades in the process.</description></item></channel></rss>