<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Servicefabric on Aashish Koirala</title><link>https://aashishkoirala.com/tags/servicefabric/</link><description>Recent content in Servicefabric on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 13 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/servicefabric/index.xml" rel="self" type="application/rss+xml"/><item><title>Revisiting Kubernetes vs. Service Fabric</title><link>https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/</guid><description>&lt;p>Since I wrote &lt;a href="https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/">my initial post&lt;/a> regarding &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> and &lt;a href="https://azure.microsoft.com/en-us/services/service-fabric/">Service Fabric&lt;/a>, a few things have happened:&lt;/p>
&lt;ul>
&lt;li>Kubernetes had a chance to mature a lot more and also, needless to say, has sky-rocketed in adoption.&lt;/li>
&lt;li>Managed Kubernetes on the major cloud providers (AKS/EKS/GKE) has had a chance to mature a lot more.&lt;/li>
&lt;li>Adoption of Service Fabric is miniscule in comparison.&lt;/li>
&lt;li>Microsoft itself seems to be putting (wisely so) much of its firepower behind Kubernetes while Service Fabric sort-of just sits there on the side.&lt;/li>
&lt;li>The successor to Service Fabric (i.e. &lt;a href="https://docs.microsoft.com/en-us/azure/service-fabric-mesh/service-fabric-mesh-overview">Service Fabric Mesh&lt;/a>) - is going to be container-driven.&lt;/li>
&lt;/ul>
&lt;p>Specifically, in terms of where Microsoft is putting its money, I think that got brought home at &lt;a href="https://news.microsoft.com/ignite2019/">Ignite 2019&lt;/a>. You only need to sit through the major keynotes and peruse the sessions to figure out that as far as these kinds of platforms are concerned, Kubernetes has &amp;ldquo;won the day&amp;rdquo;. All things being equal, my suggestion would be to adopt Kubernetes and avoid Service Fabric. If you are starting out, this means making sure you pick a technology that is not bound to any specific OS platform (sure, Kubernetes &lt;a href="https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/">can run Windows&lt;/a> workloads, but it will be a while before it gets parity with Linux if it ever does). If you&amp;rsquo;re already invested in Service Fabric, put a migration plan in place to move away.&lt;/p></description></item><item><title>On Service Fabric, Kubernetes and Docker</title><link>https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/</link><pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/</guid><description>&lt;blockquote>
&lt;blockquote>
&lt;p>&lt;strong>UPDATE (Nov 13, 2019)&lt;/strong> My views on this have changed since I wrote this post. See &lt;a href="https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/">this post&lt;/a> for where I stand now.&lt;/p>&lt;/blockquote>&lt;/blockquote>
&lt;p>Let us get &lt;a href="https://en.wikipedia.org/wiki/Docker_(software)">Docker&lt;/a> out of the way first. Microservices and containers are quite the hype these days. With hype comes misinformation and hysteria. A lot of people conflate the two (fortunately there are &lt;a href="https://jimmybogard.com/my-microservices-faq/">wise people out there&lt;/a> to set us all straight). If you have done your due diligence and decided to go with microservices, you don&amp;rsquo;t &lt;em>have&lt;/em> to go with containers. In fact, one would argue that using containers for production might be a good crutch for applications that have too many tentacles and there is no appetite to port them or rewrite them to be &amp;ldquo;portable&amp;rdquo;. Containers do have &lt;a href="https://jimmybogard.com/containers-what-is-it-good-for/">other good use cases&lt;/a> too. Docker being the leading container format (although starting to face some competition from &lt;a href="https://coreos.com/rkt/">rkt&lt;/a> these days), all in all I am glad containers exist and I am glad that Docker exists. Just be aware of the fact that what you think you must use may not be what you need at all.&lt;/p></description></item><item><title>An Azure Service Fabric Restarter in F#</title><link>https://aashishkoirala.com/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</link><pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</guid><description>&lt;p>Trying to get beyond just writing quick scripts here and there in F#, I went through functional design patterns targeted at building mainstream applications. &lt;a href="https://fsharpforfunandprofit.com/rop/">Railway-oriented programming&lt;/a> specifically stuck with me. I decided to try it along with some of the other core functional concepts such as projecting to other domains with &lt;em>map&lt;/em> and &lt;em>bind&lt;/em> operations. My first foray into this was applying it to, surprise, surprise, yet another quick script I had in place. This one was something I had put together already using F# to recycle all code packages for a given application running on &lt;a href="https://azure.microsoft.com/en-us/services/service-fabric/">Azure Service Fabric&lt;/a>.&lt;/p></description></item><item><title>Moving to Azure PaaS and Service Fabric- Part 2</title><link>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/</link><pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/</guid><description>&lt;p>This is Part 2 of a two-part blog series:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/">Part 1&lt;/a> (Application- Services, Security and UI)&lt;/li>
&lt;li>Part 2 (this one; Database, Configuration, Logging, Caching, Service Bus, Emails, Tooling, Rollout)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Database&lt;/strong>&lt;/p>
&lt;p>We moved from our on-premises installation of SQL Server to the PaaS offering that is SQL on Azure. Other than the actual physical moving of the data, the additional challenge we had was that our system had a number of separate databases that were interconnected via synonyms. Since each SQL Database is an independent resource on Azure, this would not be possible without introducing external data sources which would still be performance prohibitive. We therefore had to remove the synonyms and rework some of our code to account for this. We opted to go with an Elastic Pool that was associated with all our databases. We also configured geo-replication for redundancy.&lt;/p></description></item><item><title>Moving to Azure PaaS and Service Fabric- Part 1</title><link>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/</guid><description>&lt;p>This is Part 1 of a two-part blog series:&lt;/p>
&lt;ul>
&lt;li>Part 1 (this one; Application- Services, Security and UI)&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/">Part 2&lt;/a> (Database, Configuration, Logging, Caching, Service Bus, Emails, Tooling, Rollout)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>It has been an action-packed year at work. We moved our entire platform in one fell swoop from on-premises to &lt;a href="https://azure.microsoft.com/en-us/overview/what-is-paas/">Azure PaaS (Platform as a Service)&lt;/a>. Since this was a big re-platforming effort that would incur regression testing across the entire set of applications, we took this opportunity to include a few technology upgrades in the process. All in all, it was a daunting task and took quite a bit of research and preparation before the actual implementation could be done. I think it is worth it to highlight some of the key achievements. The move entailed the following key aspects:&lt;/p></description></item></channel></rss>