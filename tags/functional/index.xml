<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional on Aashish Koirala</title><link>https://aashishkoirala.com/tags/functional/</link><description>Recent content in Functional on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 04 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/functional/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Functional With Perhaps</title><link>https://aashishkoirala.com/blog/tech/getting-functional-with-perhaps/</link><pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/getting-functional-with-perhaps/</guid><description>&lt;p>Ever since the introduction of LINQ, people have been trying all sorts of clever ways to get more functional constructs into C# to wrap away certain annoying procedural details that are part of the language because of its non-functional beginnings. One of the most annoying class of operations in this context are the &lt;em>TryX&lt;/em> methods (e.g. &lt;code>TryGetValue&lt;/code>, &lt;code>TryParse&lt;/code> and so on) that use &lt;code>out&lt;/code> parameters and force you to break into statements what is otherwise a fluent sequence of calls.&lt;/p></description></item></channel></rss>