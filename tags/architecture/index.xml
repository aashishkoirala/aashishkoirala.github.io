<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture on Aashish Koirala</title><link>https://aashishkoirala.com/tags/architecture/</link><description>Recent content in Architecture on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 17 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Two Types of Domain Events</title><link>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</link><pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</guid><description>&lt;p>You can find a good primer on domain events in &lt;a href="http://udidahan.com/2009/06/14/domain-events-salvation/">this post&lt;/a> by Udi Dahan. There are some issues with his approach, though that Jimmy Bogard raises and addresses in &lt;a href="https://lostechies.com/jimmybogard/2014/05/13/a-better-domain-events-pattern/">his post&lt;/a>. However, I was left with two questions:&lt;/p>
&lt;ol>
&lt;li>Shouldn&amp;rsquo;t the domain event be dispatched/handled only when the transaction or the unit-of-work commits? Because whatever changes have been made to the state of the domain isn&amp;rsquo;t really permanent until that happens.&lt;/li>
&lt;li>There may be cases when domain events need to trigger changes to other domain objects in the same bounded context - and all of that needs to be persisted transactionally. In other words, in this scenario - it makes sense to have the event be dispatched just before the transaction commits. However, in this case, whatever ends up handling that event also needs access to the current transaction or unit-of-work that is in play - so that all the changes make it to persistence in one fell swoop of a commit.&lt;/li>
&lt;/ol>
&lt;p>That leads me to conclude that there are really two types of domain events that need to be handled differently. The first type as listed above would either be infrastructure-y things like sending out e-mails and such, or sending messages to other bounded contexts or external systems. The second type would be within the same bounded context but maintain certain kinds of relations within the domain that could not be modeled within the same aggregate (simply put, they take the place of database triggers in the &lt;a href="https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/">DDD&lt;/a> metaphor).&lt;/p></description></item><item><title>DDD, meet SOA</title><link>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</guid><description>&lt;p>There is a lot of discussion online around whether &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA&lt;/a> can co-exist, and if so, what that looks like. I am of the opinion that they can co-exist and have arrived at a model that seems to work for me. Consider a complex DDD system with several bounded contexts and contrast it to an SOA system - and I am including the flavor of SOA that I describe in &lt;a href="https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/">this post&lt;/a>.&lt;/p></description></item><item><title>A Method for Service-Oriented Architecture (SOA)</title><link>https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/</link><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/</guid><description>&lt;p>When you adopt service oriented architecture (&lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA&lt;/a>), the most important aspect of your architecture and high-level design step when building a new system is obviously decomposition of the system into the right services. A prudent way to decompose a system into services is to first identity what parts of the system is more likely to change more frequently. Thus, you decompose by volatility and set up dependencies such that you always have more volatile services calling less volatile services. Within the same level of volatility, of course, you would further decompose services by function if needed.&lt;/p></description></item><item><title>Getting on the Domain-Driven Design Bandwagon</title><link>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</link><pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain driven design&lt;/a> has been around for quite a while. I believe the &lt;a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">definitive book&lt;/a> on it by &lt;strong>Eric Evans&lt;/strong> came out first in 2004. For whatever reason, I had not been exposed to it in places I worked. I had been hearing about it for enough time and from enough smart people to give it a try. I researched it online a bit and went through quite a few articles. Especially, the set of articles on DDD by &lt;a href="https://lostechies.com/jimmybogard/">Jimmy Bogard&lt;/a> (Los Techies) was quite helpful. Finally, I ended up buying Evans&amp;rsquo; book and reading it cover to cover.&lt;/p></description></item><item><title>Code Generation And Aspect Orientation</title><link>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</link><pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TL;DR&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>The &lt;a href="http://msdn.microsoft.com/en-us/library/y2k85ax6(v=vs.110).aspx">CodeDOM&lt;/a> is a cool library within .NET that can be used for structured code generation and compilation. When combined with &lt;a href="http://msdn.microsoft.com/en-us/library/system.reflection(v=vs.110).aspx">Reflection&lt;/a>, one neat application is to be able to inject &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">aspects&lt;/a> into your code at run-time. I have created &lt;a href="http://aashishkoirala.github.io/aspects/">Aspects for .NET&lt;/a>, a library that does just that, and also tries to bring AOP to MEF.&lt;/p>
&lt;p>Whether it be generating boilerplate, generating proxy classes or processing DSL, code generation has numerous applications. There are a few different options for code generation in .NET:&lt;/p></description></item><item><title>On Rolling Your Own</title><link>https://aashishkoirala.com/blog/tech/on-rolling-your-own/</link><pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/on-rolling-your-own/</guid><description>&lt;p>Within the context of software development, the phrase &amp;ldquo;rolling your own&amp;rdquo; usually has a bad smell attached to it. Most of the time, this is with good reason. If you are building a fairly complex system for a business and there is ROI at stake, it surely makes sense to at least assess what is readily available in the industry and is used and thus &amp;ldquo;certified&amp;rdquo; by the community for certain components before jumping in and building it oneself (however fun that may be). On the extreme end of this, you certainly don&amp;rsquo;t want to roll your own operating system or database (unless that is at the core of what you&amp;rsquo;re doing - in which case, of course, you do).&lt;/p></description></item><item><title>Modeling, DSL and T4- Ramblings</title><link>https://aashishkoirala.com/blog/tech/modeling-dsl-and-t4-ramblings/</link><pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/modeling-dsl-and-t4-ramblings/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>UPDATE (2015/01/10)&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>There have been changes in my thoughts about how one should go about this. Consequently, I have abandoned the modeling library that I speak of in this blog post. Understandably, the link to which that points no longer works.&lt;/p>&lt;/blockquote>
&lt;p>I absolutely loathe writing repetitive code. That is what machines are for. My philosophy therefore is to try to generate as much of these kinds of code as possible. With .NET, &lt;a href="http://en.wikipedia.org/wiki/Text_Template_Transformation_Toolkit">T4&lt;/a> gives you a pretty neat code generation mechanism for generating code that follows a given pattern (the first example that comes to mind are POCOs from a domain model). If you think about it though, most multi-tier enterprise type applications have quite a bit of code that can be generated and that derives from the original domain model. How nice would it be to be able to generate a huge chunk of the codebase so that you only have to think about, write and &lt;em>test&lt;/em> what you absolutely need to? I guess Entity Framework does some of it for you if you&amp;rsquo;re into it. If you don&amp;rsquo;t like the heavy-handedness of it (like me), you could opt for keeping your model as an EDMX file but then writing a bunch of T4 around it to generate various layers of code based on it.&lt;/p></description></item><item><title>Providers for the Commons Library</title><link>https://aashishkoirala.com/blog/tech/providers-for-the-commons-library/</link><pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/providers-for-the-commons-library/</guid><description>&lt;p>A blog series on my &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> would not be complete without mentioning all the providers that go with it. The Commons Library, by itself, gives you a framework, some common functionality and a bunch of contracts. To get actual functionality out of it, providers need to be built that implement those contracts. The Commons Library does contain a bunch of built-in providers as well. These built-in providers are ones that do not have any third-party dependency other than the .NET framework and the most common of its extensions; the idea being I do not want to impose a whole bunch of dependencies on the Commons Library itself. Other than these built-in providers, I have built other providers that do have third party dependencies. These are individual libraries that are available as NuGet packages.&lt;/p></description></item><item><title>Data Access in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/data-access-in-the-commons-library/</link><pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/data-access-in-the-commons-library/</guid><description>&lt;p>The data access block in the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> is based on the &lt;em>Unit of Work&lt;/em> and &lt;em>Repository&lt;/em> patterns - or at least my take on them.&lt;/p>
&lt;h4 id="unit-of-work">Unit of Work&lt;/h4>
&lt;p>You start with a unit-of-work factory (which is an implementation if &lt;code>IUnitOfWorkFactory&lt;/code>) and call &lt;code>Create&lt;/code> on it to get an instance of &lt;code>IUnitOfWork&lt;/code> which is also &lt;code>IDisposable&lt;/code>. So, you get a unit-of-work and do your business inside a &lt;code>using&lt;/code> block, and call &lt;code>Commit&lt;/code> before you leave the block. Methods in &lt;code>IUnitOfWork&lt;/code> are all based on working with a specific entity type (which is just a POCO with an identifier field) and uses LINQ and &lt;code>IQueryable&lt;/code> - makes it easy to use as a consumer, but also makes it easy to implement providers as most providers worth their salt already have a LINQ interface. As of the time of this writing, I&amp;rsquo;ve written two providers - one based on Fluent NHibernate and one based on MongoDB.&lt;/p></description></item><item><title>Logging in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/logging-in-the-commons-library/</link><pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/logging-in-the-commons-library/</guid><description>&lt;p>My major goals when building the logging block for the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> were to keep the logging interface simple (just tell me what level, I will give you the message to log - don&amp;rsquo;t make me think too much), be able to log to multiple places (i.e. logging providers), and for the logging operation itself to be asynchronous (i.e. the only latency any logging should add is a memory operation).&lt;/p>
&lt;p>With that, I believe what is now in place meets all of these. You get a MEF imported instance of &lt;code>IAppLogger&lt;/code> which has simple &lt;code>Info, Error, Warning, Verbose&lt;/code> methods that you can use to log messages or exceptions. Everything you log goes into a queue. When you initialize an application, a log queue thread is started which processes the queue, handles all common logging stuff (i.e. figure out what the configured logging level is and whether this entry should be logged at all based on that, construct a &lt;code>LogEntry&lt;/code> object with all the information needed for each individual provider to do its thing, etc.), and dispatches the entry to all configured logging providers.&lt;/p></description></item><item><title>Configuration in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/configuration-in-the-commons-library/</link><pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/configuration-in-the-commons-library/</guid><description>&lt;p>When working on the configuration block in the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a>, I started out wanting to decouple the storage of configuration data and the format of that data from the actual configuration interface used by consumers to retrieve that data. I wanted consumers to be able to simply look up configuration data through a dictionary-style interface while the job of parsing the original format would be done by a configuration formatting provider and the job of getting that data from wherever would be done by a configuration store provider. Eventually, I settled on just following the .NET &lt;code>System.Configuration&lt;/code> style XML format- as it is somewhat of a standard now, with a lot of other library builders also using it for their configuration needs. Besides, you diverge from this format and then you have to start rolling your own for tedious things like WCF configuration or diagnostics and tracing configuration - definitely a rat-hole I did not want to go down.&lt;/p></description></item><item><title>The Commons Library</title><link>https://aashishkoirala.com/blog/tech/the-commons-library/</link><pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/the-commons-library/</guid><description>&lt;p>A commons library is something I&amp;rsquo;ve always tried to maintain. The idea is you have something of your own that handles (or at least provides a way to handle) common cross-cutting concerns in all applications that you build. This includes areas such as configuration, logging, security, error handling, data access, dependency injection and caching to name a few. As long as it is kept up to date, it is also a good way to keep up to date with new technologies in these areas. My last attempt at a commons library was during my .NET 2 days - and it worked pretty well for applications that I built back then. I realized recently that I hadn&amp;rsquo;t really kept it up to date and as a result was not using it. So, I decided to scrap it and build something from scratch that would take advantage of the latest and the greatest that&amp;rsquo;s out there (that being .NET 4.5 as of now).&lt;/p></description></item></channel></rss>