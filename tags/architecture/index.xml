<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>architecture on Aashish Koirala</title><link>https://aashishkoirala.com/tags/architecture/</link><description>Recent content in architecture on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Two Types of Domain Events</title><link>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</link><pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</guid><description>You can find a good primer on domain events in this post by Udi Dahan. There are some issues with his approach, though that Jimmy Bogard raises and addresses in his post. However, I was left with two questions:
Shouldn&amp;rsquo;t the domain event be dispatched/handled only when the transaction or the unit-of-work commits? Because whatever changes have been made to the state of the domain isn&amp;rsquo;t really permanent until that happens.</description></item><item><title>DDD, meet SOA</title><link>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</guid><description>There is a lot of discussion online around whether DDD and SOA can co-exist, and if so, what that looks like. I am of the opinion that they can co-exist and have arrived at a model that seems to work for me. Consider a complex DDD system with several bounded contexts and contrast it to an SOA system - and I am including the flavor of SOA that I describe in this post.</description></item><item><title>A Method for Service-Oriented Architecture (SOA)</title><link>https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/</link><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/</guid><description>When you adopt service oriented architecture (SOA), the most important aspect of your architecture and high-level design step when building a new system is obviously decomposition of the system into the right services. A prudent way to decompose a system into services is to first identity what parts of the system is more likely to change more frequently. Thus, you decompose by volatility and set up dependencies such that you always have more volatile services calling less volatile services.</description></item><item><title>Getting on the Domain-Driven Design Bandwagon</title><link>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</link><pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</guid><description>Domain driven design has been around for quite a while. I believe the definitive book on it by Eric Evans came out first in 2004. For whatever reason, I had not been exposed to it in places I worked. I had been hearing about it for enough time and from enough smart people to give it a try. I researched it online a bit and went through quite a few articles.</description></item><item><title>Code Generation And Aspect Orientation</title><link>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</link><pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</guid><description>TL;DR
The CodeDOM is a cool library within .NET that can be used for structured code generation and compilation. When combined with Reflection, one neat application is to be able to inject aspects into your code at run-time. I have created Aspects for .NET, a library that does just that, and also tries to bring AOP to MEF.
Whether it be generating boilerplate, generating proxy classes or processing DSL, code generation has numerous applications.</description></item><item><title>On Rolling Your Own</title><link>https://aashishkoirala.com/blog/tech/on-rolling-your-own/</link><pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/on-rolling-your-own/</guid><description>Within the context of software development, the phrase &amp;ldquo;rolling your own&amp;rdquo; usually has a bad smell attached to it. Most of the time, this is with good reason. If you are building a fairly complex system for a business and there is ROI at stake, it surely makes sense to at least assess what is readily available in the industry and is used and thus &amp;ldquo;certified&amp;rdquo; by the community for certain components before jumping in and building it oneself (however fun that may be).</description></item><item><title>Modeling, DSL and T4- Ramblings</title><link>https://aashishkoirala.com/blog/tech/modeling-dsl-and-t4-ramblings/</link><pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/modeling-dsl-and-t4-ramblings/</guid><description>UPDATE (2015/01/10)
There have been changes in my thoughts about how one should go about this. Consequently, I have abandoned the modeling library that I speak of in this blog post. Understandably, the link to which that points no longer works.
I absolutely loathe writing repetitive code. That is what machines are for. My philosophy therefore is to try to generate as much of these kinds of code as possible.</description></item><item><title>Providers for the Commons Library</title><link>https://aashishkoirala.com/blog/tech/providers-for-the-commons-library/</link><pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/providers-for-the-commons-library/</guid><description>A blog series on my Commons Library would not be complete without mentioning all the providers that go with it. The Commons Library, by itself, gives you a framework, some common functionality and a bunch of contracts. To get actual functionality out of it, providers need to be built that implement those contracts. The Commons Library does contain a bunch of built-in providers as well. These built-in providers are ones that do not have any third-party dependency other than the .</description></item><item><title>Data Access in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/data-access-in-the-commons-library/</link><pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/data-access-in-the-commons-library/</guid><description>The data access block in the Commons Library is based on the Unit of Work and Repository patterns - or at least my take on them.
Unit of Work You start with a unit-of-work factory (which is an implementation if IUnitOfWorkFactory) and call Create on it to get an instance of IUnitOfWork which is also IDisposable. So, you get a unit-of-work and do your business inside a using block, and call Commit before you leave the block.</description></item><item><title>Logging in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/logging-in-the-commons-library/</link><pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/logging-in-the-commons-library/</guid><description>My major goals when building the logging block for the Commons Library were to keep the logging interface simple (just tell me what level, I will give you the message to log - don&amp;rsquo;t make me think too much), be able to log to multiple places (i.e. logging providers), and for the logging operation itself to be asynchronous (i.e. the only latency any logging should add is a memory operation).</description></item><item><title>Configuration in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/configuration-in-the-commons-library/</link><pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/configuration-in-the-commons-library/</guid><description>When working on the configuration block in the Commons Library, I started out wanting to decouple the storage of configuration data and the format of that data from the actual configuration interface used by consumers to retrieve that data. I wanted consumers to be able to simply look up configuration data through a dictionary-style interface while the job of parsing the original format would be done by a configuration formatting provider and the job of getting that data from wherever would be done by a configuration store provider.</description></item><item><title>The Commons Library</title><link>https://aashishkoirala.com/blog/tech/the-commons-library/</link><pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/the-commons-library/</guid><description>A commons library is something I&amp;rsquo;ve always tried to maintain. The idea is you have something of your own that handles (or at least provides a way to handle) common cross-cutting concerns in all applications that you build. This includes areas such as configuration, logging, security, error handling, data access, dependency injection and caching to name a few. As long as it is kept up to date, it is also a good way to keep up to date with new technologies in these areas.</description></item></channel></rss>