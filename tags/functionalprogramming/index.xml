<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functionalprogramming on Aashish Koirala</title><link>https://aashishkoirala.com/tags/functionalprogramming/</link><description>Recent content in Functionalprogramming on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 15 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/functionalprogramming/index.xml" rel="self" type="application/rss+xml"/><item><title>An Azure Service Fabric Restarter in F#</title><link>https://aashishkoirala.com/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</link><pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</guid><description>&lt;p>Trying to get beyond just writing quick scripts here and there in F#, I went through functional design patterns targeted at building mainstream applications. &lt;a href="https://fsharpforfunandprofit.com/rop/">Railway-oriented programming&lt;/a> specifically stuck with me. I decided to try it along with some of the other core functional concepts such as projecting to other domains with &lt;em>map&lt;/em> and &lt;em>bind&lt;/em> operations. My first foray into this was applying it to, surprise, surprise, yet another quick script I had in place. This one was something I had put together already using F# to recycle all code packages for a given application running on &lt;a href="https://azure.microsoft.com/en-us/services/service-fabric/">Azure Service Fabric&lt;/a>.&lt;/p></description></item><item><title>Fiddling with F#</title><link>https://aashishkoirala.com/blog/tech/fiddling-with-fsharp/</link><pubDate>Sun, 05 Jun 2016 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/fiddling-with-fsharp/</guid><description>&lt;p>I have always had a keen interest in functional programming. While I still shy away from going completely functional for full-blown applications, I try to use the tenets of functional programming as much as I can even when writing C#. This is made much easier by the fact that C# has borrowed a lot of functional programming features as it has evolved. With each new version of the language, I find my code getting more concise and more expressive mostly owing to these features. That said, if you are looking for a functional-first experience, nothing beats a functional language. I like &lt;strong>F#&lt;/strong> as it belongs to the .NET ecosystem but is derived from &lt;strong>OCaml&lt;/strong> which itself is quite elegant.&lt;/p></description></item></channel></rss>