<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Modeling on Aashish Koirala</title><link>https://aashishkoirala.com/tags/modeling/</link><description>Recent content in Modeling on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 26 Feb 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/modeling/index.xml" rel="self" type="application/rss+xml"/><item><title>Code Generation And Aspect Orientation</title><link>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</link><pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TL;DR&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>The &lt;a href="http://msdn.microsoft.com/en-us/library/y2k85ax6(v=vs.110).aspx">CodeDOM&lt;/a> is a cool library within .NET that can be used for structured code generation and compilation. When combined with &lt;a href="http://msdn.microsoft.com/en-us/library/system.reflection(v=vs.110).aspx">Reflection&lt;/a>, one neat application is to be able to inject &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">aspects&lt;/a> into your code at run-time. I have created &lt;a href="http://aashishkoirala.github.io/aspects/">Aspects for .NET&lt;/a>, a library that does just that, and also tries to bring AOP to MEF.&lt;/p>
&lt;p>Whether it be generating boilerplate, generating proxy classes or processing DSL, code generation has numerous applications. There are a few different options for code generation in .NET:&lt;/p></description></item><item><title>Modeling, DSL and T4- Ramblings</title><link>https://aashishkoirala.com/blog/tech/modeling-dsl-and-t4-ramblings/</link><pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/modeling-dsl-and-t4-ramblings/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>UPDATE (2015/01/10)&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>There have been changes in my thoughts about how one should go about this. Consequently, I have abandoned the modeling library that I speak of in this blog post. Understandably, the link to which that points no longer works.&lt;/p>&lt;/blockquote>
&lt;p>I absolutely loathe writing repetitive code. That is what machines are for. My philosophy therefore is to try to generate as much of these kinds of code as possible. With .NET, &lt;a href="http://en.wikipedia.org/wiki/Text_Template_Transformation_Toolkit">T4&lt;/a> gives you a pretty neat code generation mechanism for generating code that follows a given pattern (the first example that comes to mind are POCOs from a domain model). If you think about it though, most multi-tier enterprise type applications have quite a bit of code that can be generated and that derives from the original domain model. How nice would it be to be able to generate a huge chunk of the codebase so that you only have to think about, write and &lt;em>test&lt;/em> what you absolutely need to? I guess Entity Framework does some of it for you if you&amp;rsquo;re into it. If you don&amp;rsquo;t like the heavy-handedness of it (like me), you could opt for keeping your model as an EDMX file but then writing a bunch of T4 around it to generate various layers of code based on it.&lt;/p></description></item></channel></rss>