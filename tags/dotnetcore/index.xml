<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnetcore on Aashish Koirala</title><link>https://aashishkoirala.com/tags/dotnetcore/</link><description>Recent content in dotnetcore on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/dotnetcore/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Console Application in .NET Core with DI and Configuration</title><link>https://aashishkoirala.com/blog/tech/simple-console-application-in-dotnet-core-with-di-and-configuration/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/simple-console-application-in-dotnet-core-with-di-and-configuration/</guid><description>While the .NET Core documentation and libraries do a good job of providing an easy way to get started with hosted apps (web or otherwise), it is somewhat lacking in terms of the same guidance for simple run-to-completion type console apps. You can write a simple Main() method and do your stuff, but how do you get the advantage of the amazing configuration and dependency injection that you get out of the box with hosted apps?</description></item><item><title>Working with Windows Containers in Kubernetes</title><link>https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/</guid><description>Even though Docker was built atop Linux containers and that is the majority of Docker usage out there, Windows Containers have been a thing for a while now. They went mainstream in 2016, and one hopes &amp;ldquo;ready for primetime&amp;rdquo; with Windows Server 2019. Even though integration with Docker is getting tighter, if you are in the unfortunate position of having to use Windows Containers with Kubernetes, you are going to have issues.</description></item><item><title>Running .NET Core Global Tools Without the SDK</title><link>https://aashishkoirala.com/blog/tech/running-dotnet-core-global-tools-without-the-sdk/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/running-dotnet-core-global-tools-without-the-sdk/</guid><description>.NET Core Global Tools are pretty neat. If you are targetting developers with the .NET Core SDK installed on their machines and need to ship CLI tools, your job is made immensely easier. It is just as easy as shipping a NuGet package. However, once you get used to building these things, it is easy to fall into the trap of treating this shipping mechanism as if it were Chocolatey (or apt-get, or yum, or what-have-you).</description></item><item><title>Listor- Showcasing React and .NET Core</title><link>https://aashishkoirala.com/blog/tech/listor-showcasing-react-and-dotnet-core/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/listor-showcasing-react-and-dotnet-core/</guid><description>For both React and for .NET Core (specifically ASP.NET Core and Entity Framework Core), I got sick of playing around with little prototypes and decided to build an application. Listor is my first proper application I have built using both these technologies. It is a simple list-maker application- nothing fancy. But I have been using it since I put it up and it has come in handy quite a bit.</description></item></channel></rss>