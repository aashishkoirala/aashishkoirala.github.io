<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnetcore on Aashish Koirala</title><link>https://aashishkoirala.github.io/tags/dotnetcore/</link><description>Recent content in dotnetcore on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.github.io/tags/dotnetcore/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Console Application in .NET Core with DI and Configuration</title><link>https://aashishkoirala.github.io/blog/tech/simple-console-application-in-dotnet-core-with-di-and-configuration/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/simple-console-application-in-dotnet-core-with-di-and-configuration/</guid><description>While the .NET Core documentation and libraries do a good job of providing an easy way to get started with hosted apps (web or otherwise), it is somewhat lacking in terms of the same guidance for simple run-to-completion type console apps. You can write a simple Main() method and do your stuff, but how do you get the advantage of the amazing configuration and dependency injection that you get out of the box with hosted apps?</description></item></channel></rss>