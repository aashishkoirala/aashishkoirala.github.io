<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservices on Aashish Koirala</title><link>https://aashishkoirala.com/tags/microservices/</link><description>Recent content in Microservices on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 20 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>The Rise of Go</title><link>https://aashishkoirala.com/blog/tech/the-rise-of-go/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/the-rise-of-go/</guid><description>&lt;p>Recently, &lt;a href="https://golang.org/">Go&lt;/a> has seen a real uptick in popularity and adoption for a variety of different usages. It has been around for a while and has been continually improving. The purpose-built simplicity and extra focus on making concurrency easy and safe is part of it. The other part I like is the ease with which what you write becomes portable. These aspects especially make it a good fit to write infrastructure and tooling.&lt;/p></description></item><item><title>Revisiting Kubernetes vs. Service Fabric</title><link>https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/</guid><description>&lt;p>Since I wrote &lt;a href="https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/">my initial post&lt;/a> regarding &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> and &lt;a href="https://azure.microsoft.com/en-us/services/service-fabric/">Service Fabric&lt;/a>, a few things have happened:&lt;/p>
&lt;ul>
&lt;li>Kubernetes had a chance to mature a lot more and also, needless to say, has sky-rocketed in adoption.&lt;/li>
&lt;li>Managed Kubernetes on the major cloud providers (AKS/EKS/GKE) has had a chance to mature a lot more.&lt;/li>
&lt;li>Adoption of Service Fabric is miniscule in comparison.&lt;/li>
&lt;li>Microsoft itself seems to be putting (wisely so) much of its firepower behind Kubernetes while Service Fabric sort-of just sits there on the side.&lt;/li>
&lt;li>The successor to Service Fabric (i.e. &lt;a href="https://docs.microsoft.com/en-us/azure/service-fabric-mesh/service-fabric-mesh-overview">Service Fabric Mesh&lt;/a>) - is going to be container-driven.&lt;/li>
&lt;/ul>
&lt;p>Specifically, in terms of where Microsoft is putting its money, I think that got brought home at &lt;a href="https://news.microsoft.com/ignite2019/">Ignite 2019&lt;/a>. You only need to sit through the major keynotes and peruse the sessions to figure out that as far as these kinds of platforms are concerned, Kubernetes has &amp;ldquo;won the day&amp;rdquo;. All things being equal, my suggestion would be to adopt Kubernetes and avoid Service Fabric. If you are starting out, this means making sure you pick a technology that is not bound to any specific OS platform (sure, Kubernetes &lt;a href="https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/">can run Windows&lt;/a> workloads, but it will be a while before it gets parity with Linux if it ever does). If you&amp;rsquo;re already invested in Service Fabric, put a migration plan in place to move away.&lt;/p></description></item><item><title>Working with Windows Containers in Kubernetes</title><link>https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/</guid><description>&lt;p>Even though &lt;strong>Docker&lt;/strong> was built atop Linux containers and that is the majority of Docker usage out there, &lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/">Windows Containers&lt;/a> have been a thing for a while now. They went mainstream in 2016, and one hopes &amp;ldquo;ready for primetime&amp;rdquo; with Windows Server 2019. Even though integration with Docker is getting tighter, if you are in the unfortunate position of having to use Windows Containers with &lt;strong>Kubernetes&lt;/strong>, you are going to have issues.&lt;/p></description></item><item><title>Installing PFX Certificates in Docker Containers</title><link>https://aashishkoirala.com/blog/tech/installing-pfx-certificates-in-docker-containers/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/installing-pfx-certificates-in-docker-containers/</guid><description>&lt;p>Recently, I came across having to install PKCS12 certificate bundles (i.e. a PFX file with the certificate and private key included, protected with a password) on a &lt;strong>Docker&lt;/strong> container. This is standard fare on normal Windows machines or on PaaS systems such as Azure App Service. Doing this on a container, though, proved to be tricky (perhaps with good reason as I mention later) - so tricky that I ended up writing &lt;a href="https://pfxtool.aashishkoirala.com">my own tool&lt;/a> to do it. I have written this up in case you have similar needs and are working with &lt;strong>.NET Core&lt;/strong>.&lt;/p></description></item><item><title>On Service Fabric, Kubernetes and Docker</title><link>https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/</link><pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/</guid><description>&lt;blockquote>
&lt;blockquote>
&lt;p>&lt;strong>UPDATE (Nov 13, 2019)&lt;/strong> My views on this have changed since I wrote this post. See &lt;a href="https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/">this post&lt;/a> for where I stand now.&lt;/p>&lt;/blockquote>&lt;/blockquote>
&lt;p>Let us get &lt;a href="https://en.wikipedia.org/wiki/Docker_(software)">Docker&lt;/a> out of the way first. Microservices and containers are quite the hype these days. With hype comes misinformation and hysteria. A lot of people conflate the two (fortunately there are &lt;a href="https://jimmybogard.com/my-microservices-faq/">wise people out there&lt;/a> to set us all straight). If you have done your due diligence and decided to go with microservices, you don&amp;rsquo;t &lt;em>have&lt;/em> to go with containers. In fact, one would argue that using containers for production might be a good crutch for applications that have too many tentacles and there is no appetite to port them or rewrite them to be &amp;ldquo;portable&amp;rdquo;. Containers do have &lt;a href="https://jimmybogard.com/containers-what-is-it-good-for/">other good use cases&lt;/a> too. Docker being the leading container format (although starting to face some competition from &lt;a href="https://coreos.com/rkt/">rkt&lt;/a> these days), all in all I am glad containers exist and I am glad that Docker exists. Just be aware of the fact that what you think you must use may not be what you need at all.&lt;/p></description></item></channel></rss>