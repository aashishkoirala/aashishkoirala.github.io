<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Csharp on Aashish Koirala</title><link>https://aashishkoirala.com/tags/csharp/</link><description>Recent content in Csharp on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 21 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Console Application in .NET Core with DI and Configuration</title><link>https://aashishkoirala.com/blog/tech/simple-console-application-in-dotnet-core-with-di-and-configuration/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/simple-console-application-in-dotnet-core-with-di-and-configuration/</guid><description>&lt;p>While the .NET Core documentation and libraries do a good job of providing an easy way to get started with hosted apps (web or otherwise), it is somewhat lacking in terms of the same guidance for simple run-to-completion type console apps. You can write a simple &lt;code>Main()&lt;/code> method and do your stuff, but how do you get the advantage of the amazing configuration and dependency injection that you get out of the box with hosted apps? Surely, you could set up all that machinery and maybe create an &lt;code>IHostedService&lt;/code> implementation just to get going. Even then, you are still left with a hosted app that you have to deal with shutting down after your logic is done.&lt;/p></description></item><item><title>Running .NET Core Global Tools Without the SDK</title><link>https://aashishkoirala.com/blog/tech/running-dotnet-core-global-tools-without-the-sdk/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/running-dotnet-core-global-tools-without-the-sdk/</guid><description>&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools">.NET Core Global Tools&lt;/a> are pretty neat. If you are targetting developers with the .NET Core SDK installed on their machines and need to ship CLI tools, your job is made immensely easier. It is just as easy as shipping a NuGet package. However, once you get used to building these things, it is easy to fall into the trap of treating this shipping mechanism as if it were &lt;a href="https://chocolatey.org/">Chocolatey&lt;/a> (or &lt;em>apt-get&lt;/em>, or &lt;em>yum&lt;/em>, or what-have-you). It is certainly not that. The process of installing and upgrading your tools are handled by the .NET Core SDK - which alleviates you from having to create a self-contained package if you were shipping a ready-to-go tool - and this makes sense - global tools are a developer-targetted thing. You&amp;rsquo;re not supposed to use it to distribute end-user applications.&lt;/p></description></item><item><title>Reader-Writer Locking with Async-Await</title><link>https://aashishkoirala.com/blog/tech/reader-writer-locking-with-async-await/</link><pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/reader-writer-locking-with-async-await/</guid><description>&lt;p>Consider this another pitfall warning. If you are a frequent user of &lt;a href="https://aashishkoirala.com/blog/tech/reader-writer-locking-in-dotnet/">reader/writer locking&lt;/a> (via the &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim?view=netframework-4.7.2">&lt;code>ReaderWriterLockSlim&lt;/code>&lt;/a> class) like I am, you will undoubtedly run into this situation. As more and more code we write these days are asynchronous with the use of &lt;code>async/await&lt;/code>, it is easy to end up in the following situation (an oversimplification, but just imagine write locks in there as well):&lt;/p>
&lt;pre>&lt;code>async Task MyMethod()
{
	...
	myReaderWriterLockSlim.EnterReadLock();
	var thing = await ReadThingAsync();
	... 
	myReaderWriterLockSlim.ExitReadLock(); // This guy will choke.
}
&lt;/code>&lt;/pre>
&lt;p>This, of course, will not work. This is because reader/writer locks, at least the implementation in .NET, are &lt;em>thread-affine&lt;/em>. This means the very same thread that acquired a lock must be the one to release it. As soon as you hit an &lt;code>await&lt;/code>, you have dispatched the rest of the behavior to some other thread. So this cannot work.&lt;/p></description></item><item><title>Writing a WS-Federation Based STS using WIF</title><link>https://aashishkoirala.com/blog/tech/writing-a-ws-federation-based-sts-using-wif/</link><pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-a-ws-federation-based-sts-using-wif/</guid><description>&lt;p>Even though &lt;a href="https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language">SAML&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/WS-Security">WS-*&lt;/a> have started to be looked upon as the old guard of security protocols with the popularity of &lt;a href="http://oauth.net/2/">OAuth 2&lt;/a>, they are not without their merits. For one, they are &lt;a href="https://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/">inherently more secure than OAuth&lt;/a> (in fact, you need to rely on a separate underlying secure transport for OAuth to be considered secure- and if you are someone who believes &lt;a href="http://www.zdnet.com/article/how-the-nsa-and-your-boss-can-intercept-and-break-ssl/">SSL is broken&lt;/a>, then OAuth is practically insecure). It just so happens that their demerits are very visible to someone trying to implement or integrate them. OAuth, by contrast, is much simpler and easier to implement- and for most purposes, secure enough. If you have settled on &lt;a href="https://msdn.microsoft.com/en-us/library/bb498017.aspx">WS-Federation&lt;/a> as your protocol of choice, &lt;a href="https://msdn.microsoft.com/en-us/library/hh377151(v=vs.110).aspx">Windows Identity Foundation (WIF)&lt;/a> is most likely going to be your de-facto choice. While powerful, WIF as a library is not what one would call &amp;ldquo;easy to use&amp;rdquo;. If it&amp;rsquo;s cumbersome when you use it as a relying party, the complexity is ten-fold if you try to build a security token service (STS) based on it.&lt;/p></description></item><item><title>Beware of this WCF Serialization Pitfall</title><link>https://aashishkoirala.com/blog/tech/beware-of-this-wcf-serialization-pitfall/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/beware-of-this-wcf-serialization-pitfall/</guid><description>&lt;p>Ideally, one should avoid data contracts with complex graphs- especially with repeated references and definitely ones with circular references. Those can make your payload explode on serialization. With repeated references, you may run into an integrity issue on deserialization. With circular references, the serialization will enter a recursive loop and you will probably run into a stack overflow.&lt;/p>
&lt;p>Seeing that in certain situations, this becomes unavoidable, WCF has &lt;a href="https://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractattribute.isreference(v=vs.110).aspx">a way&lt;/a> that you can tell it to preserve object references during serialization. You do this by setting &lt;em>IsReference&lt;/em> to &lt;strong>true&lt;/strong> on the &lt;em>DataContract&lt;/em> attribute that you use to decorate the composite type that is your data contract.&lt;/p></description></item><item><title>Diagnosing MEF Composition Errors</title><link>https://aashishkoirala.com/blog/tech/diagnosing-mef-composition-errors/</link><pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/diagnosing-mef-composition-errors/</guid><description>&lt;p>For all its goodness, if something goes wrong, problems with &lt;a href="https://aashishkoirala.com/blog/tech/mef-for-everything/">MEF&lt;/a> are terribly hard to diagnose. Thankfully, there&amp;rsquo;s an &lt;a href="https://blogs.msdn.microsoft.com/dsplaisted/2010/07/13/how-to-debug-and-diagnose-mef-failures/">article&lt;/a> out there by &lt;a href="https://social.msdn.microsoft.com/profile/dsplaisted">Daniel Plaisted&lt;/a> at Microsoft that goes into great detail into all the things that can go wrong with MEF and how to get to the bottom of each one. I have it bookmarked, and if you work a lot with MEF, you should too. The one area that I find most useful, though, is figuring out composition-time errors using tracing.&lt;/p></description></item><item><title>An Easy Service Proxy Executor for WCF</title><link>https://aashishkoirala.com/blog/tech/an-easy-service-proxy-executor-for-wcf/</link><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/an-easy-service-proxy-executor-for-wcf/</guid><description>&lt;p>If you have adopted service oriented architecture (&lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA&lt;/a>) and are using WCF as the hosting/communication mechanism for your internal services, chances are you are doing one of two things: you publish each service like any old WCF service and your other services which are consumers of said published service consume it through its WSDL; or you create shared libraries that include the contract information that both the service and its consumer reference. Both are somewhat cumbersome but can be managed. If all your services are internal, though, going the WSDL route is somewhat of an unnecessary overhead and is just a bit more unmanageable.&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 4</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/</link><pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/</guid><description>&lt;p>This is the last in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">Provider basics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">A simple, pointless solution&lt;/a>&lt;/li>
&lt;li>&lt;strong>A tiny ORM of our own&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="a-tiny-orm-of-our-own">A tiny ORM of our own&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">previous post&lt;/a>, we took a look at a simple, albeit pointless example of a LINQ provider. We wrap the series up this time by looking at something a little less pointless - a LINQ-based ORM, albeit a very rudimentary one. As with the previous one, it helps to take a look at the source code first:&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 3</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/</guid><description>&lt;p>This is the third in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">Provider basics&lt;/a>&lt;/li>
&lt;li>&lt;strong>A simple, pointless solution&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/">A tiny ORM of our own&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="a-simple-pointless-solution">A simple, pointless solution&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">previous post&lt;/a>, we took a look at what happens when you call LINQ methods on &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>, and how you can use that to build your own provider. We take that a step further this time by building an actual provider - albeit a somewhat pointless one, in that it adds LINQ support to something that doesn&amp;rsquo;t really need it. The point, though, is to keep it simple and try to understand how the process works.&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 2</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/</link><pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/</guid><description>&lt;p>This is the second in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;strong>Provider basics&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">A simple, pointless solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/">A tiny ORM of our own&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="provider-basics">Provider Basics&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">previous post&lt;/a>, we took a look at the two flavors of LINQ methods, i.e. the methods and classes around &lt;code>IEnumerable&amp;lt;T&amp;gt;&lt;/code> and the methods and classes around &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>. In this post, we expand upon what happens when you call LINQ methods on &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>, and how you can use that to build your own provider.&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 1</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/</guid><description>&lt;p>This is the first in a short series of posts on writing your own LINQ provider. While LINQ is the best thing that ever happened to .NET, and using it is so much fun and makes life so much easier, writing your own LINQ provider is &amp;ldquo;complicated&amp;rdquo; to say the least (context- the LINQ interface to NHibernate, RavenDB or Lucene - those are all providers).&lt;/p>
&lt;p>A quick outline of the series:&lt;/p></description></item><item><title>Getting Functional With Perhaps</title><link>https://aashishkoirala.com/blog/tech/getting-functional-with-perhaps/</link><pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/getting-functional-with-perhaps/</guid><description>&lt;p>Ever since the introduction of LINQ, people have been trying all sorts of clever ways to get more functional constructs into C# to wrap away certain annoying procedural details that are part of the language because of its non-functional beginnings. One of the most annoying class of operations in this context are the &lt;em>TryX&lt;/em> methods (e.g. &lt;code>TryGetValue&lt;/code>, &lt;code>TryParse&lt;/code> and so on) that use &lt;code>out&lt;/code> parameters and force you to break into statements what is otherwise a fluent sequence of calls.&lt;/p></description></item><item><title>Code Generation And Aspect Orientation</title><link>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</link><pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TL;DR&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>The &lt;a href="http://msdn.microsoft.com/en-us/library/y2k85ax6(v=vs.110).aspx">CodeDOM&lt;/a> is a cool library within .NET that can be used for structured code generation and compilation. When combined with &lt;a href="http://msdn.microsoft.com/en-us/library/system.reflection(v=vs.110).aspx">Reflection&lt;/a>, one neat application is to be able to inject &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">aspects&lt;/a> into your code at run-time. I have created &lt;a href="http://aashishkoirala.github.io/aspects/">Aspects for .NET&lt;/a>, a library that does just that, and also tries to bring AOP to MEF.&lt;/p>
&lt;p>Whether it be generating boilerplate, generating proxy classes or processing DSL, code generation has numerous applications. There are a few different options for code generation in .NET:&lt;/p></description></item><item><title>Reader Writer Locking In .NET</title><link>https://aashishkoirala.com/blog/tech/reader-writer-locking-in-dotnet/</link><pubDate>Tue, 18 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/reader-writer-locking-in-dotnet/</guid><description>&lt;p>Quite often people turn to the &lt;a href="http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx">&lt;code>lock&lt;/code>&lt;/a> statement when protecting access to shared resources from multiple threads. A lot of times, though, this is too big of a hammer. This is because to maintain the integrity of the lock, any access of the protected resource, be it simply accessing its value or modifying it, needs to be done within the lock. This means even concurrent reads get serialized. A lot of times, what you need is for concurrent reads to be possible as long as they read a consistent value, while writes are serialized.&lt;/p></description></item><item><title>RudyMQ- A Rudimentary Message Queue for Windows</title><link>https://aashishkoirala.com/blog/tech/rudymq-a-rudimentary-message-queue-for-windows/</link><pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/rudymq-a-rudimentary-message-queue-for-windows/</guid><description>&lt;p>For some odd reason out of the blue, I got this hankering to build a message queue (albeit rudimentary - hence the name) from scratch. I&amp;rsquo;ve been working with MSMQ for a while now, mostly as a transport for WCF. As cool as it is, it can really get on your nerves at times. It is an enterprise grade product, after all, which means there are a lot of dials you can turn. If something is not right, you&amp;rsquo;ll get an error. If your experience has been the same as mine, you will recognize the dreaded &lt;em>insufficient resources&lt;/em> error that MSMQ gives you for almost any of a thousand things that can go wrong.&lt;/p></description></item><item><title>On Rolling Your Own</title><link>https://aashishkoirala.com/blog/tech/on-rolling-your-own/</link><pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/on-rolling-your-own/</guid><description>&lt;p>Within the context of software development, the phrase &amp;ldquo;rolling your own&amp;rdquo; usually has a bad smell attached to it. Most of the time, this is with good reason. If you are building a fairly complex system for a business and there is ROI at stake, it surely makes sense to at least assess what is readily available in the industry and is used and thus &amp;ldquo;certified&amp;rdquo; by the community for certain components before jumping in and building it oneself (however fun that may be). On the extreme end of this, you certainly don&amp;rsquo;t want to roll your own operating system or database (unless that is at the core of what you&amp;rsquo;re doing - in which case, of course, you do).&lt;/p></description></item><item><title>Yes, One More To-Do Application</title><link>https://aashishkoirala.com/blog/tech/yes-one-more-to-do-application/</link><pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/yes-one-more-to-do-application/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>UPDATE (2015/1/7)&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>This application has been re-written from scratch using some new stuff I learned. The new application is called &lt;strong>CHORE&lt;/strong>. Understandably, the links to the application and source code as mentioned in the original post don&amp;rsquo;t work anymore. I did not update them as I want the original post to stand as is. Here, however, are relevant links to the new application:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>The application is hosted &lt;a href="http://chore.apphb.com">here&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>The source code can be found &lt;a href="http://github.com/aashishkoirala/chore">here&lt;/a>.&lt;/p></description></item><item><title>Finance Manager</title><link>https://aashishkoirala.com/blog/tech/finance-manager/</link><pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/finance-manager/</guid><description>&lt;p>A bunch of things I&amp;rsquo;ve been working on and have blogged about have culminated into an actual application that uses all of it. &lt;a href="http://aashishkoirala.github.io/financemanager/">Finance Manager&lt;/a> is a SPA web application I built for my own use to keep track of my finances. This application allows me to create periodic budgets and record all my transactions. I can then look at my budgeted versus actual amounts based on those transactions. This was already something I was doing with Excel spreadsheet. I took what I was doing and created a domain model out of it, and built this application around it. It is not quite feature complete and not deployed anywhere yet, but I have &lt;a href="http://github.com/aashishkoirala/financemanager">open sourced&lt;/a> the code.&lt;/p></description></item><item><title>Providers for the Commons Library</title><link>https://aashishkoirala.com/blog/tech/providers-for-the-commons-library/</link><pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/providers-for-the-commons-library/</guid><description>&lt;p>A blog series on my &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> would not be complete without mentioning all the providers that go with it. The Commons Library, by itself, gives you a framework, some common functionality and a bunch of contracts. To get actual functionality out of it, providers need to be built that implement those contracts. The Commons Library does contain a bunch of built-in providers as well. These built-in providers are ones that do not have any third-party dependency other than the .NET framework and the most common of its extensions; the idea being I do not want to impose a whole bunch of dependencies on the Commons Library itself. Other than these built-in providers, I have built other providers that do have third party dependencies. These are individual libraries that are available as NuGet packages.&lt;/p></description></item><item><title>Data Access in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/data-access-in-the-commons-library/</link><pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/data-access-in-the-commons-library/</guid><description>&lt;p>The data access block in the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> is based on the &lt;em>Unit of Work&lt;/em> and &lt;em>Repository&lt;/em> patterns - or at least my take on them.&lt;/p>
&lt;h4 id="unit-of-work">Unit of Work&lt;/h4>
&lt;p>You start with a unit-of-work factory (which is an implementation if &lt;code>IUnitOfWorkFactory&lt;/code>) and call &lt;code>Create&lt;/code> on it to get an instance of &lt;code>IUnitOfWork&lt;/code> which is also &lt;code>IDisposable&lt;/code>. So, you get a unit-of-work and do your business inside a &lt;code>using&lt;/code> block, and call &lt;code>Commit&lt;/code> before you leave the block. Methods in &lt;code>IUnitOfWork&lt;/code> are all based on working with a specific entity type (which is just a POCO with an identifier field) and uses LINQ and &lt;code>IQueryable&lt;/code> - makes it easy to use as a consumer, but also makes it easy to implement providers as most providers worth their salt already have a LINQ interface. As of the time of this writing, I&amp;rsquo;ve written two providers - one based on Fluent NHibernate and one based on MongoDB.&lt;/p></description></item><item><title>Logging in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/logging-in-the-commons-library/</link><pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/logging-in-the-commons-library/</guid><description>&lt;p>My major goals when building the logging block for the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> were to keep the logging interface simple (just tell me what level, I will give you the message to log - don&amp;rsquo;t make me think too much), be able to log to multiple places (i.e. logging providers), and for the logging operation itself to be asynchronous (i.e. the only latency any logging should add is a memory operation).&lt;/p>
&lt;p>With that, I believe what is now in place meets all of these. You get a MEF imported instance of &lt;code>IAppLogger&lt;/code> which has simple &lt;code>Info, Error, Warning, Verbose&lt;/code> methods that you can use to log messages or exceptions. Everything you log goes into a queue. When you initialize an application, a log queue thread is started which processes the queue, handles all common logging stuff (i.e. figure out what the configured logging level is and whether this entry should be logged at all based on that, construct a &lt;code>LogEntry&lt;/code> object with all the information needed for each individual provider to do its thing, etc.), and dispatches the entry to all configured logging providers.&lt;/p></description></item><item><title>Configuration in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/configuration-in-the-commons-library/</link><pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/configuration-in-the-commons-library/</guid><description>&lt;p>When working on the configuration block in the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a>, I started out wanting to decouple the storage of configuration data and the format of that data from the actual configuration interface used by consumers to retrieve that data. I wanted consumers to be able to simply look up configuration data through a dictionary-style interface while the job of parsing the original format would be done by a configuration formatting provider and the job of getting that data from wherever would be done by a configuration store provider. Eventually, I settled on just following the .NET &lt;code>System.Configuration&lt;/code> style XML format- as it is somewhat of a standard now, with a lot of other library builders also using it for their configuration needs. Besides, you diverge from this format and then you have to start rolling your own for tedious things like WCF configuration or diagnostics and tracing configuration - definitely a rat-hole I did not want to go down.&lt;/p></description></item><item><title>Handling Duplicate Libraries with MEF</title><link>https://aashishkoirala.com/blog/tech/handling-duplicate-libraries-with-mef/</link><pubDate>Fri, 09 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/handling-duplicate-libraries-with-mef/</guid><description>&lt;p>While building the composition/DI piece for the &lt;a href="http://aashishkoirala.github.io/commons/">Commons Library&lt;/a>, one problem I ran into was the fact that if you told MEF to load assemblies from a number of different places - and they all had copies of the same library (which is possible especially with common dependencies), MEF would load the exports in each assembly as many times as it finds it. What you end up with then is a whole bunch of matching exports for a contract that you expect only one of.&lt;/p></description></item><item><title>MEF for everything!</title><link>https://aashishkoirala.com/blog/tech/mef-for-everything/</link><pubDate>Wed, 07 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/mef-for-everything/</guid><description>&lt;p>In the first of a series of blogs around my &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a>, I want to shed more light on my choice of MEF as the underlying mechanism for the &lt;code>AK.Commons.Composition&lt;/code> namespace - which handles dependency injection &lt;strong>as well as&lt;/strong> extensibility or plugin type stuff. I like its attribute based syntax, choice of different types of catalogs and dynamic discovery (and yes, I am not using dynamic discovery just yet but I intend to; the same goes for taking advantage of different types of catalogs). The following three features, however, stood out for me:&lt;/p></description></item><item><title>The Commons Library</title><link>https://aashishkoirala.com/blog/tech/the-commons-library/</link><pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/the-commons-library/</guid><description>&lt;p>A commons library is something I&amp;rsquo;ve always tried to maintain. The idea is you have something of your own that handles (or at least provides a way to handle) common cross-cutting concerns in all applications that you build. This includes areas such as configuration, logging, security, error handling, data access, dependency injection and caching to name a few. As long as it is kept up to date, it is also a good way to keep up to date with new technologies in these areas. My last attempt at a commons library was during my .NET 2 days - and it worked pretty well for applications that I built back then. I realized recently that I hadn&amp;rsquo;t really kept it up to date and as a result was not using it. So, I decided to scrap it and build something from scratch that would take advantage of the latest and the greatest that&amp;rsquo;s out there (that being .NET 4.5 as of now).&lt;/p></description></item><item><title>Automatic Resource Management in C#</title><link>https://aashishkoirala.com/blog/tech/automatic-resource-management-in-csharp/</link><pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/automatic-resource-management-in-csharp/</guid><description>&lt;p>Both the .NET framework and Java are garbage-collected systems. This means that when you instantiate objects, the framework keeps track of how the object is being referenced, and automatically frees up memory used by the object when it is no longer referenced by anything and is “out of scope”. This works beautifully with objects that are part of the framework. In .NET lingo, these are called “managed resources”. However, a lot of times, a .NET or Java application needs to talk to other systems external to the framework – such as databases, file systems, network sockets, graphics engines, and so on – i.e. “unmanaged resources”. In such cases, it is up to the programmer to handle allocation and de-allocation of resources. Framework classes that provide access to such resources will usually provide routines to close or dispose of resources. However, the programmer still needs to write boilerplate in order to do it and the boilerplate usually becomes cumbersome when you take into account things like exception handling.&lt;/p></description></item></channel></rss>