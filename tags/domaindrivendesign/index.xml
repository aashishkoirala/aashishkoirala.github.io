<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>domaindrivendesign on Aashish Koirala</title><link>https://aashishkoirala.com/tags/domaindrivendesign/</link><description>Recent content in domaindrivendesign on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/domaindrivendesign/index.xml" rel="self" type="application/rss+xml"/><item><title>Two Types of Domain Events</title><link>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</link><pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</guid><description>You can find a good primer on domain events in this post by Udi Dahan. There are some issues with his approach, though that Jimmy Bogard raises and addresses in his post. However, I was left with two questions:
Shouldn&amp;rsquo;t the domain event be dispatched/handled only when the transaction or the unit-of-work commits? Because whatever changes have been made to the state of the domain isn&amp;rsquo;t really permanent until that happens.</description></item><item><title>DDD, meet SOA</title><link>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</guid><description>There is a lot of discussion online around whether DDD and SOA can co-exist, and if so, what that looks like. I am of the opinion that they can co-exist and have arrived at a model that seems to work for me. Consider a complex DDD system with several bounded contexts and contrast it to an SOA system - and I am including the flavor of SOA that I describe in this post.</description></item><item><title>Getting on the Domain-Driven Design Bandwagon</title><link>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</link><pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</guid><description>Domain driven design has been around for quite a while. I believe the definitive book on it by Eric Evans came out first in 2004. For whatever reason, I had not been exposed to it in places I worked. I had been hearing about it for enough time and from enough smart people to give it a try. I researched it online a bit and went through quite a few articles.</description></item></channel></rss>