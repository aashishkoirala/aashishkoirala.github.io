<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Domaindrivendesign on Aashish Koirala</title><link>https://aashishkoirala.com/tags/domaindrivendesign/</link><description>Recent content in Domaindrivendesign on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 17 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/domaindrivendesign/index.xml" rel="self" type="application/rss+xml"/><item><title>Two Types of Domain Events</title><link>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</link><pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</guid><description>&lt;p>You can find a good primer on domain events in &lt;a href="http://udidahan.com/2009/06/14/domain-events-salvation/">this post&lt;/a> by Udi Dahan. There are some issues with his approach, though that Jimmy Bogard raises and addresses in &lt;a href="https://lostechies.com/jimmybogard/2014/05/13/a-better-domain-events-pattern/">his post&lt;/a>. However, I was left with two questions:&lt;/p>
&lt;ol>
&lt;li>Shouldn&amp;rsquo;t the domain event be dispatched/handled only when the transaction or the unit-of-work commits? Because whatever changes have been made to the state of the domain isn&amp;rsquo;t really permanent until that happens.&lt;/li>
&lt;li>There may be cases when domain events need to trigger changes to other domain objects in the same bounded context - and all of that needs to be persisted transactionally. In other words, in this scenario - it makes sense to have the event be dispatched just before the transaction commits. However, in this case, whatever ends up handling that event also needs access to the current transaction or unit-of-work that is in play - so that all the changes make it to persistence in one fell swoop of a commit.&lt;/li>
&lt;/ol>
&lt;p>That leads me to conclude that there are really two types of domain events that need to be handled differently. The first type as listed above would either be infrastructure-y things like sending out e-mails and such, or sending messages to other bounded contexts or external systems. The second type would be within the same bounded context but maintain certain kinds of relations within the domain that could not be modeled within the same aggregate (simply put, they take the place of database triggers in the &lt;a href="https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/">DDD&lt;/a> metaphor).&lt;/p></description></item><item><title>DDD, meet SOA</title><link>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</guid><description>&lt;p>There is a lot of discussion online around whether &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA&lt;/a> can co-exist, and if so, what that looks like. I am of the opinion that they can co-exist and have arrived at a model that seems to work for me. Consider a complex DDD system with several bounded contexts and contrast it to an SOA system - and I am including the flavor of SOA that I describe in &lt;a href="https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/">this post&lt;/a>.&lt;/p></description></item><item><title>Getting on the Domain-Driven Design Bandwagon</title><link>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</link><pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain driven design&lt;/a> has been around for quite a while. I believe the &lt;a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">definitive book&lt;/a> on it by &lt;strong>Eric Evans&lt;/strong> came out first in 2004. For whatever reason, I had not been exposed to it in places I worked. I had been hearing about it for enough time and from enough smart people to give it a try. I researched it online a bit and went through quite a few articles. Especially, the set of articles on DDD by &lt;a href="https://lostechies.com/jimmybogard/">Jimmy Bogard&lt;/a> (Los Techies) was quite helpful. Finally, I ended up buying Evans&amp;rsquo; book and reading it cover to cover.&lt;/p></description></item></channel></rss>