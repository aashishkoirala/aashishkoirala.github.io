<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>serviceoriented on Aashish Koirala</title><link>https://aashishkoirala.github.io/tags/serviceoriented/</link><description>Recent content in serviceoriented on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Aug 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.github.io/tags/serviceoriented/index.xml" rel="self" type="application/rss+xml"/><item><title>DDD, meet SOA</title><link>https://aashishkoirala.github.io/blog/tech/ddd-meet-soa/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/ddd-meet-soa/</guid><description>There is a lot of discussion online around whether DDD and SOA can co-exist, and if so, what that looks like. I am of the opinion that they can co-exist and have arrived at a model that seems to work for me. Consider a complex DDD system with several bounded contexts and contrast it to an SOA system - and I am including the flavor of SOA that I describe in this post.</description></item><item><title>A Method for Service-Oriented Architecture (SOA)</title><link>https://aashishkoirala.github.io/blog/tech/a-method-for-service-oriented-architecture-soa/</link><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/a-method-for-service-oriented-architecture-soa/</guid><description>When you adopt service oriented architecture (SOA), the most important aspect of your architecture and high-level design step when building a new system is obviously decomposition of the system into the right services. A prudent way to decompose a system into services is to first identity what parts of the system is more likely to change more frequently. Thus, you decompose by volatility and set up dependencies such that you always have more volatile services calling less volatile services.</description></item></channel></rss>