<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linq on Aashish Koirala</title><link>https://aashishkoirala.com/tags/linq/</link><description>Recent content in Linq on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 16 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/tags/linq/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Your Own LINQ Provider- Part 4</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/</link><pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/</guid><description>&lt;p>This is the last in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">Provider basics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">A simple, pointless solution&lt;/a>&lt;/li>
&lt;li>&lt;strong>A tiny ORM of our own&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="a-tiny-orm-of-our-own">A tiny ORM of our own&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">previous post&lt;/a>, we took a look at a simple, albeit pointless example of a LINQ provider. We wrap the series up this time by looking at something a little less pointless - a LINQ-based ORM, albeit a very rudimentary one. As with the previous one, it helps to take a look at the source code first:&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 3</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/</guid><description>&lt;p>This is the third in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">Provider basics&lt;/a>&lt;/li>
&lt;li>&lt;strong>A simple, pointless solution&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/">A tiny ORM of our own&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="a-simple-pointless-solution">A simple, pointless solution&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">previous post&lt;/a>, we took a look at what happens when you call LINQ methods on &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>, and how you can use that to build your own provider. We take that a step further this time by building an actual provider - albeit a somewhat pointless one, in that it adds LINQ support to something that doesn&amp;rsquo;t really need it. The point, though, is to keep it simple and try to understand how the process works.&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 2</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/</link><pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/</guid><description>&lt;p>This is the second in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;strong>Provider basics&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">A simple, pointless solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/">A tiny ORM of our own&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="provider-basics">Provider Basics&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">previous post&lt;/a>, we took a look at the two flavors of LINQ methods, i.e. the methods and classes around &lt;code>IEnumerable&amp;lt;T&amp;gt;&lt;/code> and the methods and classes around &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>. In this post, we expand upon what happens when you call LINQ methods on &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>, and how you can use that to build your own provider.&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 1</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/</guid><description>&lt;p>This is the first in a short series of posts on writing your own LINQ provider. While LINQ is the best thing that ever happened to .NET, and using it is so much fun and makes life so much easier, writing your own LINQ provider is &amp;ldquo;complicated&amp;rdquo; to say the least (context- the LINQ interface to NHibernate, RavenDB or Lucene - those are all providers).&lt;/p>
&lt;p>A quick outline of the series:&lt;/p></description></item></channel></rss>