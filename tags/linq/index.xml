<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linq on Aashish Koirala</title><link>https://aashishkoirala.github.io/tags/linq/</link><description>Recent content in linq on Aashish Koirala</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 16 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.github.io/tags/linq/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Your Own LINQ Provider- Part 4</title><link>https://aashishkoirala.github.io/blog/tech/writing-your-own-linq-provider-part-4/</link><pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/writing-your-own-linq-provider-part-4/</guid><description>This is the last in a short series of posts on writing your own LINQ provider. A quick outline of the series:
A primer Provider basics A simple, pointless solution A tiny ORM of our own (this post) A tiny ORM of our own In the previous post, we took a look at a simple, albeit pointless example of a LINQ provider. We wrap the series up this time by looking at something a little less pointless - a LINQ-based ORM, albeit a very rudimentary one.</description></item><item><title>Writing Your Own LINQ Provider- Part 3</title><link>https://aashishkoirala.github.io/blog/tech/writing-your-own-linq-provider-part-3/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/writing-your-own-linq-provider-part-3/</guid><description>This is the third in a short series of posts on writing your own LINQ provider. A quick outline of the series:
A primer Provider basics A simple, pointless solution (this post) A tiny ORM of our own A simple, pointless solution In the previous post, we took a look at what happens when you call LINQ methods on IQueryable&amp;lt;T&amp;gt;, and how you can use that to build your own provider.</description></item><item><title>Writing Your Own LINQ Provider- Part 2</title><link>https://aashishkoirala.github.io/blog/tech/writing-your-own-linq-provider-part-2/</link><pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/writing-your-own-linq-provider-part-2/</guid><description>This is the second in a short series of posts on writing your own LINQ provider. A quick outline of the series:
A primer Provider basics (this post) A simple, pointless solution A tiny ORM of our own Provider Basics In the previous post, we took a look at the two flavors of LINQ methods, i.e. the methods and classes around IEnumerable&amp;lt;T&amp;gt; and the methods and classes around IQueryable&amp;lt;T&amp;gt;.</description></item><item><title>Writing Your Own LINQ Provider- Part 1</title><link>https://aashishkoirala.github.io/blog/tech/writing-your-own-linq-provider-part-1/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.github.io/blog/tech/writing-your-own-linq-provider-part-1/</guid><description>This is the first in a short series of posts on writing your own LINQ provider. While LINQ is the best thing that ever happened to .NET, and using it is so much fun and makes life so much easier, writing your own LINQ provider is &amp;ldquo;complicated&amp;rdquo; to say the least (context- the LINQ interface to NHibernate, RavenDB or Lucene - those are all providers).
A quick outline of the series:</description></item></channel></rss>