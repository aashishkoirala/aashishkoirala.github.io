<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aashish Koirala</title><link>https://aashishkoirala.com/</link><description>Recent content on Aashish Koirala</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 21 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aashishkoirala.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Console Application in .NET Core with DI and Configuration</title><link>https://aashishkoirala.com/blog/tech/simple-console-application-in-dotnet-core-with-di-and-configuration/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/simple-console-application-in-dotnet-core-with-di-and-configuration/</guid><description>&lt;p>While the .NET Core documentation and libraries do a good job of providing an easy way to get started with hosted apps (web or otherwise), it is somewhat lacking in terms of the same guidance for simple run-to-completion type console apps. You can write a simple &lt;code>Main()&lt;/code> method and do your stuff, but how do you get the advantage of the amazing configuration and dependency injection that you get out of the box with hosted apps? Surely, you could set up all that machinery and maybe create an &lt;code>IHostedService&lt;/code> implementation just to get going. Even then, you are still left with a hosted app that you have to deal with shutting down after your logic is done.&lt;/p></description></item><item><title>An AWS Primer for Azure Developers</title><link>https://aashishkoirala.com/blog/tech/an-aws-primer-for-azure-developers/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/an-aws-primer-for-azure-developers/</guid><description>&lt;p>Even though &lt;a href="https://aws.amazon.com/">AWS&lt;/a> has been around for much longer, as is the norm for a lot of people coming from the .NET/Microsoft side of things, my cloud experience started with &lt;a href="https://azure.microsoft.com/">Azure&lt;/a>. I got into AWS when I was a few years into Azure. I remember thinking at that point it would be nice to have something like this primer that would give me a very high-level introduction to AWS based on what I knew of Azure. So here it is.&lt;/p></description></item><item><title>The Rise of Go</title><link>https://aashishkoirala.com/blog/tech/the-rise-of-go/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/the-rise-of-go/</guid><description>&lt;p>Recently, &lt;a href="https://golang.org/">Go&lt;/a> has seen a real uptick in popularity and adoption for a variety of different usages. It has been around for a while and has been continually improving. The purpose-built simplicity and extra focus on making concurrency easy and safe is part of it. The other part I like is the ease with which what you write becomes portable. These aspects especially make it a good fit to write infrastructure and tooling.&lt;/p></description></item><item><title>Revisiting Kubernetes vs. Service Fabric</title><link>https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/</guid><description>&lt;p>Since I wrote &lt;a href="https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/">my initial post&lt;/a> regarding &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a> and &lt;a href="https://azure.microsoft.com/en-us/services/service-fabric/">Service Fabric&lt;/a>, a few things have happened:&lt;/p>
&lt;ul>
&lt;li>Kubernetes had a chance to mature a lot more and also, needless to say, has sky-rocketed in adoption.&lt;/li>
&lt;li>Managed Kubernetes on the major cloud providers (AKS/EKS/GKE) has had a chance to mature a lot more.&lt;/li>
&lt;li>Adoption of Service Fabric is miniscule in comparison.&lt;/li>
&lt;li>Microsoft itself seems to be putting (wisely so) much of its firepower behind Kubernetes while Service Fabric sort-of just sits there on the side.&lt;/li>
&lt;li>The successor to Service Fabric (i.e. &lt;a href="https://docs.microsoft.com/en-us/azure/service-fabric-mesh/service-fabric-mesh-overview">Service Fabric Mesh&lt;/a>) - is going to be container-driven.&lt;/li>
&lt;/ul>
&lt;p>Specifically, in terms of where Microsoft is putting its money, I think that got brought home at &lt;a href="https://news.microsoft.com/ignite2019/">Ignite 2019&lt;/a>. You only need to sit through the major keynotes and peruse the sessions to figure out that as far as these kinds of platforms are concerned, Kubernetes has &amp;ldquo;won the day&amp;rdquo;. All things being equal, my suggestion would be to adopt Kubernetes and avoid Service Fabric. If you are starting out, this means making sure you pick a technology that is not bound to any specific OS platform (sure, Kubernetes &lt;a href="https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/">can run Windows&lt;/a> workloads, but it will be a while before it gets parity with Linux if it ever does). If you&amp;rsquo;re already invested in Service Fabric, put a migration plan in place to move away.&lt;/p></description></item><item><title>Working with Windows Containers in Kubernetes</title><link>https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/working-with-windows-containers-in-kubernetes/</guid><description>&lt;p>Even though &lt;strong>Docker&lt;/strong> was built atop Linux containers and that is the majority of Docker usage out there, &lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/">Windows Containers&lt;/a> have been a thing for a while now. They went mainstream in 2016, and one hopes &amp;ldquo;ready for primetime&amp;rdquo; with Windows Server 2019. Even though integration with Docker is getting tighter, if you are in the unfortunate position of having to use Windows Containers with &lt;strong>Kubernetes&lt;/strong>, you are going to have issues.&lt;/p></description></item><item><title>Installing PFX Certificates in Docker Containers</title><link>https://aashishkoirala.com/blog/tech/installing-pfx-certificates-in-docker-containers/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/installing-pfx-certificates-in-docker-containers/</guid><description>&lt;p>Recently, I came across having to install PKCS12 certificate bundles (i.e. a PFX file with the certificate and private key included, protected with a password) on a &lt;strong>Docker&lt;/strong> container. This is standard fare on normal Windows machines or on PaaS systems such as Azure App Service. Doing this on a container, though, proved to be tricky (perhaps with good reason as I mention later) - so tricky that I ended up writing &lt;a href="https://pfxtool.aashishkoirala.com">my own tool&lt;/a> to do it. I have written this up in case you have similar needs and are working with &lt;strong>.NET Core&lt;/strong>.&lt;/p></description></item><item><title>Running .NET Core Global Tools Without the SDK</title><link>https://aashishkoirala.com/blog/tech/running-dotnet-core-global-tools-without-the-sdk/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/running-dotnet-core-global-tools-without-the-sdk/</guid><description>&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools">.NET Core Global Tools&lt;/a> are pretty neat. If you are targetting developers with the .NET Core SDK installed on their machines and need to ship CLI tools, your job is made immensely easier. It is just as easy as shipping a NuGet package. However, once you get used to building these things, it is easy to fall into the trap of treating this shipping mechanism as if it were &lt;a href="https://chocolatey.org/">Chocolatey&lt;/a> (or &lt;em>apt-get&lt;/em>, or &lt;em>yum&lt;/em>, or what-have-you). It is certainly not that. The process of installing and upgrading your tools are handled by the .NET Core SDK - which alleviates you from having to create a self-contained package if you were shipping a ready-to-go tool - and this makes sense - global tools are a developer-targetted thing. You&amp;rsquo;re not supposed to use it to distribute end-user applications.&lt;/p></description></item><item><title>Azure DevOps for CI and CD</title><link>https://aashishkoirala.com/blog/tech/azure-devops-for-ci-and-cd/</link><pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/azure-devops-for-ci-and-cd/</guid><description>&lt;p>I set up CI and CD for two of my applications using &lt;a href="https://azure.microsoft.com/en-us/services/devops/">Azure DevOps&lt;/a>. It was quite easy. Setting up the build pipeline is as simple as including a YAML file in your source repository. It then just comes down to knowing &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&amp;amp;tabs=schema">how the build YAML schema works&lt;/a>. As far as the release (or deployment) pipeline is concerned, though, I could not find a similar method. I had to set it up through the Azure DevOps UI. I don&amp;rsquo;t know if there is some information I am missing, but that would seem to somewhat go against the DevOps principle - you know - &lt;em>infrastructure as code&lt;/em> and all.&lt;/p></description></item><item><title>On Service Fabric, Kubernetes and Docker</title><link>https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/</link><pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/on-service-fabric-kubernetes-and-docker/</guid><description>&lt;blockquote>
&lt;blockquote>
&lt;p>&lt;strong>UPDATE (Nov 13, 2019)&lt;/strong> My views on this have changed since I wrote this post. See &lt;a href="https://aashishkoirala.com/blog/tech/revisiting-kubernetes-vs-service-fabric/">this post&lt;/a> for where I stand now.&lt;/p>&lt;/blockquote>&lt;/blockquote>
&lt;p>Let us get &lt;a href="https://en.wikipedia.org/wiki/Docker_(software)">Docker&lt;/a> out of the way first. Microservices and containers are quite the hype these days. With hype comes misinformation and hysteria. A lot of people conflate the two (fortunately there are &lt;a href="https://jimmybogard.com/my-microservices-faq/">wise people out there&lt;/a> to set us all straight). If you have done your due diligence and decided to go with microservices, you don&amp;rsquo;t &lt;em>have&lt;/em> to go with containers. In fact, one would argue that using containers for production might be a good crutch for applications that have too many tentacles and there is no appetite to port them or rewrite them to be &amp;ldquo;portable&amp;rdquo;. Containers do have &lt;a href="https://jimmybogard.com/containers-what-is-it-good-for/">other good use cases&lt;/a> too. Docker being the leading container format (although starting to face some competition from &lt;a href="https://coreos.com/rkt/">rkt&lt;/a> these days), all in all I am glad containers exist and I am glad that Docker exists. Just be aware of the fact that what you think you must use may not be what you need at all.&lt;/p></description></item><item><title>Reader-Writer Locking with Async-Await</title><link>https://aashishkoirala.com/blog/tech/reader-writer-locking-with-async-await/</link><pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/reader-writer-locking-with-async-await/</guid><description>&lt;p>Consider this another pitfall warning. If you are a frequent user of &lt;a href="https://aashishkoirala.com/blog/tech/reader-writer-locking-in-dotnet/">reader/writer locking&lt;/a> (via the &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim?view=netframework-4.7.2">&lt;code>ReaderWriterLockSlim&lt;/code>&lt;/a> class) like I am, you will undoubtedly run into this situation. As more and more code we write these days are asynchronous with the use of &lt;code>async/await&lt;/code>, it is easy to end up in the following situation (an oversimplification, but just imagine write locks in there as well):&lt;/p>
&lt;pre>&lt;code>async Task MyMethod()
{
	...
	myReaderWriterLockSlim.EnterReadLock();
	var thing = await ReadThingAsync();
	... 
	myReaderWriterLockSlim.ExitReadLock(); // This guy will choke.
}
&lt;/code>&lt;/pre>
&lt;p>This, of course, will not work. This is because reader/writer locks, at least the implementation in .NET, are &lt;em>thread-affine&lt;/em>. This means the very same thread that acquired a lock must be the one to release it. As soon as you hit an &lt;code>await&lt;/code>, you have dispatched the rest of the behavior to some other thread. So this cannot work.&lt;/p></description></item><item><title>Listor- Showcasing React and .NET Core</title><link>https://aashishkoirala.com/blog/tech/listor-showcasing-react-and-dotnet-core/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/listor-showcasing-react-and-dotnet-core/</guid><description>&lt;p>For both &lt;a href="https://reactjs.org/">React&lt;/a> and for &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/">.NET Core&lt;/a> (specifically &lt;a href="https://www.asp.net/core/overview/aspnet-vnext">ASP.NET Core&lt;/a> and &lt;a href="https://docs.microsoft.com/en-us/ef/core/">Entity Framework Core&lt;/a>), I got sick of playing around with little prototypes and decided to build an application. &lt;a href="https://github.com/aashishkoirala/listor">Listor&lt;/a> is my first proper application I have built using both these technologies. It is a simple list-maker application- nothing fancy. But I have been using it since I put it up and it has come in handy quite a bit.&lt;/p>
&lt;p>I am quite impressed with .NET Core (or I should say &amp;ldquo;the new .NET&amp;rdquo; - to mean not just the .NET Core runtime, but .NET Standard, the new project system, ASP.NET Core, EF Core, and let&amp;rsquo;s say even the latest language improvements to C#). So much so, that it is going to suck a bit going back to writing traditional .NET Framework stuff for my day job.&lt;/p></description></item><item><title>An Azure Service Fabric Restarter in F#</title><link>https://aashishkoirala.com/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</link><pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/an-azure-service-fabric-restarter-in-fsharp/</guid><description>&lt;p>Trying to get beyond just writing quick scripts here and there in F#, I went through functional design patterns targeted at building mainstream applications. &lt;a href="https://fsharpforfunandprofit.com/rop/">Railway-oriented programming&lt;/a> specifically stuck with me. I decided to try it along with some of the other core functional concepts such as projecting to other domains with &lt;em>map&lt;/em> and &lt;em>bind&lt;/em> operations. My first foray into this was applying it to, surprise, surprise, yet another quick script I had in place. This one was something I had put together already using F# to recycle all code packages for a given application running on &lt;a href="https://azure.microsoft.com/en-us/services/service-fabric/">Azure Service Fabric&lt;/a>.&lt;/p></description></item><item><title>OAuth2 and OpenID Connect versus WS and SAML</title><link>https://aashishkoirala.com/blog/tech/oauth2-and-openid-connect-versus-ws-and-saml/</link><pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/oauth2-and-openid-connect-versus-ws-and-saml/</guid><description>&lt;p>I have mentioned how part of &lt;a href="https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/">our replatforming project&lt;/a> that saw us move to Azure was moving the security protocol from &lt;a href="https://en.wikipedia.org/wiki/WS-Federation">WS-Federation&lt;/a>/&lt;a href="https://en.wikipedia.org/wiki/WS-Trust">WS-Trust&lt;/a> to &lt;a href="https://oauth.net/2/">OAuth2&lt;/a> and &lt;a href="https://openid.net/connect/">OpenID Connect&lt;/a>. I kept running into rumblings on the internet about how even though it was widely adopted, OAuth2/OpenID Connect were somehow less secure. Comparing a secure implementation of both side by side, I did not really see how this could be. Since our industry is not short on oversimplification and grand proclamations, I decided to pose this question to experts in the field.&lt;/p></description></item><item><title>Moving to Azure PaaS and Service Fabric- Part 2</title><link>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/</link><pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/</guid><description>&lt;p>This is Part 2 of a two-part blog series:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/">Part 1&lt;/a> (Application- Services, Security and UI)&lt;/li>
&lt;li>Part 2 (this one; Database, Configuration, Logging, Caching, Service Bus, Emails, Tooling, Rollout)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Database&lt;/strong>&lt;/p>
&lt;p>We moved from our on-premises installation of SQL Server to the PaaS offering that is SQL on Azure. Other than the actual physical moving of the data, the additional challenge we had was that our system had a number of separate databases that were interconnected via synonyms. Since each SQL Database is an independent resource on Azure, this would not be possible without introducing external data sources which would still be performance prohibitive. We therefore had to remove the synonyms and rework some of our code to account for this. We opted to go with an Elastic Pool that was associated with all our databases. We also configured geo-replication for redundancy.&lt;/p></description></item><item><title>Moving to Azure PaaS and Service Fabric- Part 1</title><link>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-1/</guid><description>&lt;p>This is Part 1 of a two-part blog series:&lt;/p>
&lt;ul>
&lt;li>Part 1 (this one; Application- Services, Security and UI)&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/moving-to-azure-paas-and-service-fabric-part-2/">Part 2&lt;/a> (Database, Configuration, Logging, Caching, Service Bus, Emails, Tooling, Rollout)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>It has been an action-packed year at work. We moved our entire platform in one fell swoop from on-premises to &lt;a href="https://azure.microsoft.com/en-us/overview/what-is-paas/">Azure PaaS (Platform as a Service)&lt;/a>. Since this was a big re-platforming effort that would incur regression testing across the entire set of applications, we took this opportunity to include a few technology upgrades in the process. All in all, it was a daunting task and took quite a bit of research and preparation before the actual implementation could be done. I think it is worth it to highlight some of the key achievements. The move entailed the following key aspects:&lt;/p></description></item><item><title>The New Way Forward for SPAs with Angular and React</title><link>https://aashishkoirala.com/blog/tech/the-new-way-forward-for-spas-with-angular-and-react/</link><pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/the-new-way-forward-for-spas-with-angular-and-react/</guid><description>&lt;p>Having worked with &lt;em>Angular 1.x&lt;/em> for some time and having liked it quite a lot (I guess that one we&amp;rsquo;re supposed to call &lt;strong>AngularJS&lt;/strong>, and the new one is just &lt;strong>Angular&lt;/strong> - yes, that is not confusing at all, is it?), I must say I was quite spooked when I first saw the documentation for the new &lt;a href="https://angular.io/">Angular&lt;/a>. It indeed is a completely different framework. There is no easy migration path from AngularJS short of a rewrite, at which point you might as well evaluate all your options including React.&lt;/p></description></item><item><title>Fiddling with F#</title><link>https://aashishkoirala.com/blog/tech/fiddling-with-fsharp/</link><pubDate>Sun, 05 Jun 2016 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/fiddling-with-fsharp/</guid><description>&lt;p>I have always had a keen interest in functional programming. While I still shy away from going completely functional for full-blown applications, I try to use the tenets of functional programming as much as I can even when writing C#. This is made much easier by the fact that C# has borrowed a lot of functional programming features as it has evolved. With each new version of the language, I find my code getting more concise and more expressive mostly owing to these features. That said, if you are looking for a functional-first experience, nothing beats a functional language. I like &lt;strong>F#&lt;/strong> as it belongs to the .NET ecosystem but is derived from &lt;strong>OCaml&lt;/strong> which itself is quite elegant.&lt;/p></description></item><item><title>Writing a WS-Federation Based STS using WIF</title><link>https://aashishkoirala.com/blog/tech/writing-a-ws-federation-based-sts-using-wif/</link><pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-a-ws-federation-based-sts-using-wif/</guid><description>&lt;p>Even though &lt;a href="https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language">SAML&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/WS-Security">WS-*&lt;/a> have started to be looked upon as the old guard of security protocols with the popularity of &lt;a href="http://oauth.net/2/">OAuth 2&lt;/a>, they are not without their merits. For one, they are &lt;a href="https://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/">inherently more secure than OAuth&lt;/a> (in fact, you need to rely on a separate underlying secure transport for OAuth to be considered secure- and if you are someone who believes &lt;a href="http://www.zdnet.com/article/how-the-nsa-and-your-boss-can-intercept-and-break-ssl/">SSL is broken&lt;/a>, then OAuth is practically insecure). It just so happens that their demerits are very visible to someone trying to implement or integrate them. OAuth, by contrast, is much simpler and easier to implement- and for most purposes, secure enough. If you have settled on &lt;a href="https://msdn.microsoft.com/en-us/library/bb498017.aspx">WS-Federation&lt;/a> as your protocol of choice, &lt;a href="https://msdn.microsoft.com/en-us/library/hh377151(v=vs.110).aspx">Windows Identity Foundation (WIF)&lt;/a> is most likely going to be your de-facto choice. While powerful, WIF as a library is not what one would call &amp;ldquo;easy to use&amp;rdquo;. If it&amp;rsquo;s cumbersome when you use it as a relying party, the complexity is ten-fold if you try to build a security token service (STS) based on it.&lt;/p></description></item><item><title>Git- Rewriter of History</title><link>https://aashishkoirala.com/blog/tech/git-rewriter-of-history/</link><pubDate>Wed, 07 Jan 2015 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/git-rewriter-of-history/</guid><description>&lt;p>Undoubtedly one of the biggest advantages that &lt;a href="https://git-scm.com/">Git&lt;/a> provides is using &lt;a href="https://git-scm.com/docs/git-rebase">rebasing&lt;/a> to maintain a clean commit history. I find that I am using it a lot these days- primarily in three modes:&lt;/p>
&lt;ul>
&lt;li>As part of &lt;em>pull&lt;/em> (i.e. &lt;strong>git pull -rebase&lt;/strong>)&lt;/li>
&lt;li>Interactive rebase to: 1) keep my own history clean when I am off working on a branch by myself, and 2) clean up a feature branch&amp;rsquo;s commit history before merging it into the mainstream&lt;/li>
&lt;li>Rebase my branch against a more mainstream branch before I merge onto it (i.e. &lt;strong>git rebase&lt;/strong> &lt;em>mainstream-branch&lt;/em>)&lt;/li>
&lt;/ul>
&lt;p>With interactive rebase, usually what I do is- I will have one initial commit that describes in general the feature I am working on. It will then be followed by a whole bunch of commits that are advancements of or adjustments to that - quick and dirty ones with &amp;ldquo;WIP (i.e. work in progress) as the message. If, in the middle of this, I switch to some other significant area, then I will add another commit with a more verbose message, and then again it&amp;rsquo;s &amp;ldquo;WIP, &amp;ldquo;WIP, and so on. I will add any thing I need to qualify the &amp;ldquo;WIP with if necessary (e.g. if the &amp;ldquo;WIP is for a different context than the last few WIPs, or if the WIP does indeed add some more information to the initial commit). In any case, after some time, I will end up with a history that looks a bit like this (in chronological order):&lt;/p></description></item><item><title>Beware of this WCF Serialization Pitfall</title><link>https://aashishkoirala.com/blog/tech/beware-of-this-wcf-serialization-pitfall/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/beware-of-this-wcf-serialization-pitfall/</guid><description>&lt;p>Ideally, one should avoid data contracts with complex graphs- especially with repeated references and definitely ones with circular references. Those can make your payload explode on serialization. With repeated references, you may run into an integrity issue on deserialization. With circular references, the serialization will enter a recursive loop and you will probably run into a stack overflow.&lt;/p>
&lt;p>Seeing that in certain situations, this becomes unavoidable, WCF has &lt;a href="https://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractattribute.isreference(v=vs.110).aspx">a way&lt;/a> that you can tell it to preserve object references during serialization. You do this by setting &lt;em>IsReference&lt;/em> to &lt;strong>true&lt;/strong> on the &lt;em>DataContract&lt;/em> attribute that you use to decorate the composite type that is your data contract.&lt;/p></description></item><item><title>Using CSS Media Queries for Responsive UI Design</title><link>https://aashishkoirala.com/blog/tech/using-css-media-queries-for-responsive-ui-design/</link><pubDate>Tue, 11 Nov 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/using-css-media-queries-for-responsive-ui-design/</guid><description>&lt;p>Using something like &lt;a href="http://getbootstrap.com/">Bootstrap&lt;/a> for a &lt;a href="https://aashishkoirala.com/blog/tech/dancing-with-responsive-design/">responsive UI&lt;/a> covers most of the bases. But if you need more control, it&amp;rsquo;s a good idea to get familiar with &lt;a href="http://www.w3schools.com/css/css_rwd_mediaqueries.asp">Media Queries&lt;/a> in CSS. It might come in handy some time, plus that is what Bootstrap uses under the hood as well, and it never hurts to learn how the tools you use work. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">Mozilla page&lt;/a> on media queries goes into just the right amount of detail and gives you a good outline of everything you can do with it.&lt;/p></description></item><item><title>Diagnosing MEF Composition Errors</title><link>https://aashishkoirala.com/blog/tech/diagnosing-mef-composition-errors/</link><pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/diagnosing-mef-composition-errors/</guid><description>&lt;p>For all its goodness, if something goes wrong, problems with &lt;a href="https://aashishkoirala.com/blog/tech/mef-for-everything/">MEF&lt;/a> are terribly hard to diagnose. Thankfully, there&amp;rsquo;s an &lt;a href="https://blogs.msdn.microsoft.com/dsplaisted/2010/07/13/how-to-debug-and-diagnose-mef-failures/">article&lt;/a> out there by &lt;a href="https://social.msdn.microsoft.com/profile/dsplaisted">Daniel Plaisted&lt;/a> at Microsoft that goes into great detail into all the things that can go wrong with MEF and how to get to the bottom of each one. I have it bookmarked, and if you work a lot with MEF, you should too. The one area that I find most useful, though, is figuring out composition-time errors using tracing.&lt;/p></description></item><item><title>Two Types of Domain Events</title><link>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</link><pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/two-types-of-domain-events/</guid><description>&lt;p>You can find a good primer on domain events in &lt;a href="http://udidahan.com/2009/06/14/domain-events-salvation/">this post&lt;/a> by Udi Dahan. There are some issues with his approach, though that Jimmy Bogard raises and addresses in &lt;a href="https://lostechies.com/jimmybogard/2014/05/13/a-better-domain-events-pattern/">his post&lt;/a>. However, I was left with two questions:&lt;/p>
&lt;ol>
&lt;li>Shouldn&amp;rsquo;t the domain event be dispatched/handled only when the transaction or the unit-of-work commits? Because whatever changes have been made to the state of the domain isn&amp;rsquo;t really permanent until that happens.&lt;/li>
&lt;li>There may be cases when domain events need to trigger changes to other domain objects in the same bounded context - and all of that needs to be persisted transactionally. In other words, in this scenario - it makes sense to have the event be dispatched just before the transaction commits. However, in this case, whatever ends up handling that event also needs access to the current transaction or unit-of-work that is in play - so that all the changes make it to persistence in one fell swoop of a commit.&lt;/li>
&lt;/ol>
&lt;p>That leads me to conclude that there are really two types of domain events that need to be handled differently. The first type as listed above would either be infrastructure-y things like sending out e-mails and such, or sending messages to other bounded contexts or external systems. The second type would be within the same bounded context but maintain certain kinds of relations within the domain that could not be modeled within the same aggregate (simply put, they take the place of database triggers in the &lt;a href="https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/">DDD&lt;/a> metaphor).&lt;/p></description></item><item><title>DDD, meet SOA</title><link>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/ddd-meet-soa/</guid><description>&lt;p>There is a lot of discussion online around whether &lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA&lt;/a> can co-exist, and if so, what that looks like. I am of the opinion that they can co-exist and have arrived at a model that seems to work for me. Consider a complex DDD system with several bounded contexts and contrast it to an SOA system - and I am including the flavor of SOA that I describe in &lt;a href="https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/">this post&lt;/a>.&lt;/p></description></item><item><title>A Method for Service-Oriented Architecture (SOA)</title><link>https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/</link><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/a-method-for-service-oriented-architecture-soa/</guid><description>&lt;p>When you adopt service oriented architecture (&lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA&lt;/a>), the most important aspect of your architecture and high-level design step when building a new system is obviously decomposition of the system into the right services. A prudent way to decompose a system into services is to first identity what parts of the system is more likely to change more frequently. Thus, you decompose by volatility and set up dependencies such that you always have more volatile services calling less volatile services. Within the same level of volatility, of course, you would further decompose services by function if needed.&lt;/p></description></item><item><title>Getting on the Domain-Driven Design Bandwagon</title><link>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</link><pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/getting-on-the-domain-driven-design-bandwagon/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain driven design&lt;/a> has been around for quite a while. I believe the &lt;a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">definitive book&lt;/a> on it by &lt;strong>Eric Evans&lt;/strong> came out first in 2004. For whatever reason, I had not been exposed to it in places I worked. I had been hearing about it for enough time and from enough smart people to give it a try. I researched it online a bit and went through quite a few articles. Especially, the set of articles on DDD by &lt;a href="https://lostechies.com/jimmybogard/">Jimmy Bogard&lt;/a> (Los Techies) was quite helpful. Finally, I ended up buying Evans&amp;rsquo; book and reading it cover to cover.&lt;/p></description></item><item><title>Oatmeal, it's what's for breakfast!</title><link>https://aashishkoirala.com/blog/nontech/oatmeal-its-whats-for-breakfast/</link><pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/nontech/oatmeal-its-whats-for-breakfast/</guid><description>&lt;p>When I am in my healthy and fit zone, I get a lot done. It is quite clear there is no big secret to keeping fit - you exercise and you eat well. To that end, few would disagree that oatmeal is as healthy as they come when it comes to breakfast foods. Few would also disagree that making rolled oats is not a fun activity and eating rolled oats even less so. After about a year and a half of trial and error, I have settled on an oatmeal recipe that is easy and fast to make, decent enough to eat, and a good balance of nutrients. Most importantly, it fills you up and sets your body on the right track for the day - which is what a good breakfast should do.&lt;/p></description></item><item><title>An Easy Service Proxy Executor for WCF</title><link>https://aashishkoirala.com/blog/tech/an-easy-service-proxy-executor-for-wcf/</link><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/an-easy-service-proxy-executor-for-wcf/</guid><description>&lt;p>If you have adopted service oriented architecture (&lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture">SOA&lt;/a>) and are using WCF as the hosting/communication mechanism for your internal services, chances are you are doing one of two things: you publish each service like any old WCF service and your other services which are consumers of said published service consume it through its WSDL; or you create shared libraries that include the contract information that both the service and its consumer reference. Both are somewhat cumbersome but can be managed. If all your services are internal, though, going the WSDL route is somewhat of an unnecessary overhead and is just a bit more unmanageable.&lt;/p></description></item><item><title>Bye, Bye, TypeScript, for now</title><link>https://aashishkoirala.com/blog/tech/bye-bye-typescript-for-now/</link><pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/bye-bye-typescript-for-now/</guid><description>&lt;p>As much as I raved about TypeScript in &lt;a href="https://aashishkoirala.com/blog/tech/typescript-angularjs-and-bootstrap-the-killer-combo/">this post&lt;/a> from some time ago, sadly the time has come for me to part with it - at least for now. It is a beautiful piece of work by a beyond-brilliant group of people. As I worked more and more with JavaScript the past year, though, I realized a few things.&lt;/p>
&lt;p>The first, and this I already mentioned in my previous post, is that it is still maturing and is not quite there yet. One of my pain points was the lack of object initializers that, in my opinion, took away some of the expressiveness of JavaScript. However, as I now look at it, it is the whole idea of trying to hide the fact that everything in JavaScript is a hash-map. Thus, you can and should be able to create an object or assign an object on the fly using JSON notation. As soon as you introduce TypeScript annotations into the mix, this goes away. The best of both worlds here would be if I could have it annotated and still be able to assign or initialize using JSON (and have the JSON be validated based on the annotation).&lt;/p></description></item><item><title>Bootstrap Modal With AngularJS</title><link>https://aashishkoirala.com/blog/tech/bootstrap-modal-with-angularjs/</link><pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/bootstrap-modal-with-angularjs/</guid><description>&lt;p>We&amp;rsquo;ll look at a relatively low hanging fruit in case you&amp;rsquo;re working with vanilla AngularJS and Twitter Bootstrap and are not relying on other add-ons such as AngularUI&amp;rsquo;s Bootstrap extension. One common need I have is to be able to show or hide Bootstrap modals based on a property on my view-model. Here&amp;rsquo;s a simplified view of the controller:&lt;/p>
&lt;pre>&lt;code>var app = angular.module('app', ...);
...

app.controller('ctrl', function ($scope, ...) {
	...
	$scope.showModal = false;
	...
});
&lt;/code>&lt;/pre>
&lt;p>And here is the HTML:&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 4</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/</link><pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/</guid><description>&lt;p>This is the last in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">Provider basics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">A simple, pointless solution&lt;/a>&lt;/li>
&lt;li>&lt;strong>A tiny ORM of our own&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="a-tiny-orm-of-our-own">A tiny ORM of our own&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">previous post&lt;/a>, we took a look at a simple, albeit pointless example of a LINQ provider. We wrap the series up this time by looking at something a little less pointless - a LINQ-based ORM, albeit a very rudimentary one. As with the previous one, it helps to take a look at the source code first:&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 3</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/</guid><description>&lt;p>This is the third in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">Provider basics&lt;/a>&lt;/li>
&lt;li>&lt;strong>A simple, pointless solution&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/">A tiny ORM of our own&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="a-simple-pointless-solution">A simple, pointless solution&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/">previous post&lt;/a>, we took a look at what happens when you call LINQ methods on &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>, and how you can use that to build your own provider. We take that a step further this time by building an actual provider - albeit a somewhat pointless one, in that it adds LINQ support to something that doesn&amp;rsquo;t really need it. The point, though, is to keep it simple and try to understand how the process works.&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 2</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/</link><pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-2/</guid><description>&lt;p>This is the second in a short series of posts on writing your own LINQ provider. A quick outline of the series:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">A primer&lt;/a>&lt;/li>
&lt;li>&lt;strong>Provider basics&lt;/strong> (&lt;em>this post&lt;/em>)&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-3/">A simple, pointless solution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-4/">A tiny ORM of our own&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="provider-basics">Provider Basics&lt;/h3>
&lt;p>In the &lt;a href="https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/">previous post&lt;/a>, we took a look at the two flavors of LINQ methods, i.e. the methods and classes around &lt;code>IEnumerable&amp;lt;T&amp;gt;&lt;/code> and the methods and classes around &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>. In this post, we expand upon what happens when you call LINQ methods on &lt;code>IQueryable&amp;lt;T&amp;gt;&lt;/code>, and how you can use that to build your own provider.&lt;/p></description></item><item><title>Writing Your Own LINQ Provider- Part 1</title><link>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/writing-your-own-linq-provider-part-1/</guid><description>&lt;p>This is the first in a short series of posts on writing your own LINQ provider. While LINQ is the best thing that ever happened to .NET, and using it is so much fun and makes life so much easier, writing your own LINQ provider is &amp;ldquo;complicated&amp;rdquo; to say the least (context- the LINQ interface to NHibernate, RavenDB or Lucene - those are all providers).&lt;/p>
&lt;p>A quick outline of the series:&lt;/p></description></item><item><title>Conditional JQuery Datepicker With AngularJS</title><link>https://aashishkoirala.com/blog/tech/conditional-jquery-datepicker-with-angularjs/</link><pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/conditional-jquery-datepicker-with-angularjs/</guid><description>&lt;p>I just find AngularJS directives so much fun. It is so satisfying to see them work. Recently, I came across a requirement where I had a text field bound to a property that could either be a date or text. I had a way of knowing which one it was, but if the property was a date, the text field would need to become a datepicker, and turn back into a normal text field if not. And no, not an HTML5 date control - an old-timy jQuery datepicker.&lt;/p></description></item><item><title>Getting Functional With Perhaps</title><link>https://aashishkoirala.com/blog/tech/getting-functional-with-perhaps/</link><pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/getting-functional-with-perhaps/</guid><description>&lt;p>Ever since the introduction of LINQ, people have been trying all sorts of clever ways to get more functional constructs into C# to wrap away certain annoying procedural details that are part of the language because of its non-functional beginnings. One of the most annoying class of operations in this context are the &lt;em>TryX&lt;/em> methods (e.g. &lt;code>TryGetValue&lt;/code>, &lt;code>TryParse&lt;/code> and so on) that use &lt;code>out&lt;/code> parameters and force you to break into statements what is otherwise a fluent sequence of calls.&lt;/p></description></item><item><title>Code Generation And Aspect Orientation</title><link>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</link><pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/code-generation-and-aspect-orientation/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TL;DR&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>The &lt;a href="http://msdn.microsoft.com/en-us/library/y2k85ax6(v=vs.110).aspx">CodeDOM&lt;/a> is a cool library within .NET that can be used for structured code generation and compilation. When combined with &lt;a href="http://msdn.microsoft.com/en-us/library/system.reflection(v=vs.110).aspx">Reflection&lt;/a>, one neat application is to be able to inject &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">aspects&lt;/a> into your code at run-time. I have created &lt;a href="http://aashishkoirala.github.io/aspects/">Aspects for .NET&lt;/a>, a library that does just that, and also tries to bring AOP to MEF.&lt;/p>
&lt;p>Whether it be generating boilerplate, generating proxy classes or processing DSL, code generation has numerous applications. There are a few different options for code generation in .NET:&lt;/p></description></item><item><title>Reader Writer Locking In .NET</title><link>https://aashishkoirala.com/blog/tech/reader-writer-locking-in-dotnet/</link><pubDate>Tue, 18 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/reader-writer-locking-in-dotnet/</guid><description>&lt;p>Quite often people turn to the &lt;a href="http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx">&lt;code>lock&lt;/code>&lt;/a> statement when protecting access to shared resources from multiple threads. A lot of times, though, this is too big of a hammer. This is because to maintain the integrity of the lock, any access of the protected resource, be it simply accessing its value or modifying it, needs to be done within the lock. This means even concurrent reads get serialized. A lot of times, what you need is for concurrent reads to be possible as long as they read a consistent value, while writes are serialized.&lt;/p></description></item><item><title>RudyMQ- A Rudimentary Message Queue for Windows</title><link>https://aashishkoirala.com/blog/tech/rudymq-a-rudimentary-message-queue-for-windows/</link><pubDate>Tue, 11 Feb 2014 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/rudymq-a-rudimentary-message-queue-for-windows/</guid><description>&lt;p>For some odd reason out of the blue, I got this hankering to build a message queue (albeit rudimentary - hence the name) from scratch. I&amp;rsquo;ve been working with MSMQ for a while now, mostly as a transport for WCF. As cool as it is, it can really get on your nerves at times. It is an enterprise grade product, after all, which means there are a lot of dials you can turn. If something is not right, you&amp;rsquo;ll get an error. If your experience has been the same as mine, you will recognize the dreaded &lt;em>insufficient resources&lt;/em> error that MSMQ gives you for almost any of a thousand things that can go wrong.&lt;/p></description></item><item><title>Dancing with Responsive Design</title><link>https://aashishkoirala.com/blog/tech/dancing-with-responsive-design/</link><pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/dancing-with-responsive-design/</guid><description>&lt;p>I have been hearing about &lt;a href="http://en.wikipedia.org/wiki/Responsive_web_design">responsive design&lt;/a> on and off for some time now, and it has always appealed to me as a pattern to follow for web-based user interfaces. CSS3 is obviously quite powerful and media queries provide a relatively easy way to build one unified UI that looks great on PCs, but then adapts and shape-shifts accordingly when viewed on a smartphone or tablet without having to completely re-implement a &amp;ldquo;mobile site&amp;rdquo; as so many do today. Since UI design is not my core area, though, I never could quite gather the energy to do something with it. Then I saw support for responsiveness in the new &lt;a href="http://getbootstrap.com/css/#responsive-utilities">Bootstrap 3&lt;/a>. Like with all other aspects of web UI design, it makes responsiveness that much easier as well. As added motivation, I tried out my &lt;a href="https://aashishkoirala.com/blog/tech/yes-one-more-to-do-application/">To Do&lt;/a> application in my smartphone - and it looked awful.&lt;/p></description></item><item><title>On Rolling Your Own</title><link>https://aashishkoirala.com/blog/tech/on-rolling-your-own/</link><pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/on-rolling-your-own/</guid><description>&lt;p>Within the context of software development, the phrase &amp;ldquo;rolling your own&amp;rdquo; usually has a bad smell attached to it. Most of the time, this is with good reason. If you are building a fairly complex system for a business and there is ROI at stake, it surely makes sense to at least assess what is readily available in the industry and is used and thus &amp;ldquo;certified&amp;rdquo; by the community for certain components before jumping in and building it oneself (however fun that may be). On the extreme end of this, you certainly don&amp;rsquo;t want to roll your own operating system or database (unless that is at the core of what you&amp;rsquo;re doing - in which case, of course, you do).&lt;/p></description></item><item><title>Yes, One More To-Do Application</title><link>https://aashishkoirala.com/blog/tech/yes-one-more-to-do-application/</link><pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/yes-one-more-to-do-application/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>UPDATE (2015/1/7)&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>This application has been re-written from scratch using some new stuff I learned. The new application is called &lt;strong>CHORE&lt;/strong>. Understandably, the links to the application and source code as mentioned in the original post don&amp;rsquo;t work anymore. I did not update them as I want the original post to stand as is. Here, however, are relevant links to the new application:&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>The application is hosted &lt;a href="http://chore.apphb.com">here&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>The source code can be found &lt;a href="http://github.com/aashishkoirala/chore">here&lt;/a>.&lt;/p></description></item><item><title>Finance Manager</title><link>https://aashishkoirala.com/blog/tech/finance-manager/</link><pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/finance-manager/</guid><description>&lt;p>A bunch of things I&amp;rsquo;ve been working on and have blogged about have culminated into an actual application that uses all of it. &lt;a href="http://aashishkoirala.github.io/financemanager/">Finance Manager&lt;/a> is a SPA web application I built for my own use to keep track of my finances. This application allows me to create periodic budgets and record all my transactions. I can then look at my budgeted versus actual amounts based on those transactions. This was already something I was doing with Excel spreadsheet. I took what I was doing and created a domain model out of it, and built this application around it. It is not quite feature complete and not deployed anywhere yet, but I have &lt;a href="http://github.com/aashishkoirala/financemanager">open sourced&lt;/a> the code.&lt;/p></description></item><item><title>Modeling, DSL and T4- Ramblings</title><link>https://aashishkoirala.com/blog/tech/modeling-dsl-and-t4-ramblings/</link><pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/modeling-dsl-and-t4-ramblings/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>UPDATE (2015/01/10)&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>There have been changes in my thoughts about how one should go about this. Consequently, I have abandoned the modeling library that I speak of in this blog post. Understandably, the link to which that points no longer works.&lt;/p>&lt;/blockquote>
&lt;p>I absolutely loathe writing repetitive code. That is what machines are for. My philosophy therefore is to try to generate as much of these kinds of code as possible. With .NET, &lt;a href="http://en.wikipedia.org/wiki/Text_Template_Transformation_Toolkit">T4&lt;/a> gives you a pretty neat code generation mechanism for generating code that follows a given pattern (the first example that comes to mind are POCOs from a domain model). If you think about it though, most multi-tier enterprise type applications have quite a bit of code that can be generated and that derives from the original domain model. How nice would it be to be able to generate a huge chunk of the codebase so that you only have to think about, write and &lt;em>test&lt;/em> what you absolutely need to? I guess Entity Framework does some of it for you if you&amp;rsquo;re into it. If you don&amp;rsquo;t like the heavy-handedness of it (like me), you could opt for keeping your model as an EDMX file but then writing a bunch of T4 around it to generate various layers of code based on it.&lt;/p></description></item><item><title>TypeScript, AngularJS and Bootstrap- The Killer Combo</title><link>https://aashishkoirala.com/blog/tech/typescript-angularjs-and-bootstrap-the-killer-combo/</link><pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/typescript-angularjs-and-bootstrap-the-killer-combo/</guid><description>&lt;p>After having recently used this combination, I am in love with it. For those unfamiliar with any of these, here are quick one liners:&lt;/p>
&lt;p>&lt;strong>&lt;a href="http://typescript.codeplex.com/">TypeScript&lt;/a>&lt;/strong> is a JavaScript superset from &lt;strong>Microsoft&lt;/strong> that compiles down to JavaScript and adds static typing and other neat features like classes and what not. It is worth mentioning that none other than &lt;strong>&lt;a href="http://en.wikipedia.org/wiki/Anders_Hejlsberg">Anders Hejlsberg&lt;/a>&lt;/strong> (the father of C#) was involved in its development.&lt;/p>
&lt;p>&lt;strong>&lt;a href="http://angularjs.org/">AngularJS&lt;/a>&lt;/strong> is a JavaScript framework geared towards building rich and testable single-page applications. This one comes from none other than &lt;strong>Google&lt;/strong>.&lt;/p></description></item><item><title>Providers for the Commons Library</title><link>https://aashishkoirala.com/blog/tech/providers-for-the-commons-library/</link><pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/providers-for-the-commons-library/</guid><description>&lt;p>A blog series on my &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> would not be complete without mentioning all the providers that go with it. The Commons Library, by itself, gives you a framework, some common functionality and a bunch of contracts. To get actual functionality out of it, providers need to be built that implement those contracts. The Commons Library does contain a bunch of built-in providers as well. These built-in providers are ones that do not have any third-party dependency other than the .NET framework and the most common of its extensions; the idea being I do not want to impose a whole bunch of dependencies on the Commons Library itself. Other than these built-in providers, I have built other providers that do have third party dependencies. These are individual libraries that are available as NuGet packages.&lt;/p></description></item><item><title>Data Access in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/data-access-in-the-commons-library/</link><pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/data-access-in-the-commons-library/</guid><description>&lt;p>The data access block in the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> is based on the &lt;em>Unit of Work&lt;/em> and &lt;em>Repository&lt;/em> patterns - or at least my take on them.&lt;/p>
&lt;h4 id="unit-of-work">Unit of Work&lt;/h4>
&lt;p>You start with a unit-of-work factory (which is an implementation if &lt;code>IUnitOfWorkFactory&lt;/code>) and call &lt;code>Create&lt;/code> on it to get an instance of &lt;code>IUnitOfWork&lt;/code> which is also &lt;code>IDisposable&lt;/code>. So, you get a unit-of-work and do your business inside a &lt;code>using&lt;/code> block, and call &lt;code>Commit&lt;/code> before you leave the block. Methods in &lt;code>IUnitOfWork&lt;/code> are all based on working with a specific entity type (which is just a POCO with an identifier field) and uses LINQ and &lt;code>IQueryable&lt;/code> - makes it easy to use as a consumer, but also makes it easy to implement providers as most providers worth their salt already have a LINQ interface. As of the time of this writing, I&amp;rsquo;ve written two providers - one based on Fluent NHibernate and one based on MongoDB.&lt;/p></description></item><item><title>Logging in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/logging-in-the-commons-library/</link><pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/logging-in-the-commons-library/</guid><description>&lt;p>My major goals when building the logging block for the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a> were to keep the logging interface simple (just tell me what level, I will give you the message to log - don&amp;rsquo;t make me think too much), be able to log to multiple places (i.e. logging providers), and for the logging operation itself to be asynchronous (i.e. the only latency any logging should add is a memory operation).&lt;/p>
&lt;p>With that, I believe what is now in place meets all of these. You get a MEF imported instance of &lt;code>IAppLogger&lt;/code> which has simple &lt;code>Info, Error, Warning, Verbose&lt;/code> methods that you can use to log messages or exceptions. Everything you log goes into a queue. When you initialize an application, a log queue thread is started which processes the queue, handles all common logging stuff (i.e. figure out what the configured logging level is and whether this entry should be logged at all based on that, construct a &lt;code>LogEntry&lt;/code> object with all the information needed for each individual provider to do its thing, etc.), and dispatches the entry to all configured logging providers.&lt;/p></description></item><item><title>Configuration in the Commons Library</title><link>https://aashishkoirala.com/blog/tech/configuration-in-the-commons-library/</link><pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/configuration-in-the-commons-library/</guid><description>&lt;p>When working on the configuration block in the &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a>, I started out wanting to decouple the storage of configuration data and the format of that data from the actual configuration interface used by consumers to retrieve that data. I wanted consumers to be able to simply look up configuration data through a dictionary-style interface while the job of parsing the original format would be done by a configuration formatting provider and the job of getting that data from wherever would be done by a configuration store provider. Eventually, I settled on just following the .NET &lt;code>System.Configuration&lt;/code> style XML format- as it is somewhat of a standard now, with a lot of other library builders also using it for their configuration needs. Besides, you diverge from this format and then you have to start rolling your own for tedious things like WCF configuration or diagnostics and tracing configuration - definitely a rat-hole I did not want to go down.&lt;/p></description></item><item><title>Handling Duplicate Libraries with MEF</title><link>https://aashishkoirala.com/blog/tech/handling-duplicate-libraries-with-mef/</link><pubDate>Fri, 09 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/handling-duplicate-libraries-with-mef/</guid><description>&lt;p>While building the composition/DI piece for the &lt;a href="http://aashishkoirala.github.io/commons/">Commons Library&lt;/a>, one problem I ran into was the fact that if you told MEF to load assemblies from a number of different places - and they all had copies of the same library (which is possible especially with common dependencies), MEF would load the exports in each assembly as many times as it finds it. What you end up with then is a whole bunch of matching exports for a contract that you expect only one of.&lt;/p></description></item><item><title>MEF for everything!</title><link>https://aashishkoirala.com/blog/tech/mef-for-everything/</link><pubDate>Wed, 07 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/mef-for-everything/</guid><description>&lt;p>In the first of a series of blogs around my &lt;a href="https://aashishkoirala.com/blog/tech/the-commons-library/">Commons Library&lt;/a>, I want to shed more light on my choice of MEF as the underlying mechanism for the &lt;code>AK.Commons.Composition&lt;/code> namespace - which handles dependency injection &lt;strong>as well as&lt;/strong> extensibility or plugin type stuff. I like its attribute based syntax, choice of different types of catalogs and dynamic discovery (and yes, I am not using dynamic discovery just yet but I intend to; the same goes for taking advantage of different types of catalogs). The following three features, however, stood out for me:&lt;/p></description></item><item><title>The Commons Library</title><link>https://aashishkoirala.com/blog/tech/the-commons-library/</link><pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/the-commons-library/</guid><description>&lt;p>A commons library is something I&amp;rsquo;ve always tried to maintain. The idea is you have something of your own that handles (or at least provides a way to handle) common cross-cutting concerns in all applications that you build. This includes areas such as configuration, logging, security, error handling, data access, dependency injection and caching to name a few. As long as it is kept up to date, it is also a good way to keep up to date with new technologies in these areas. My last attempt at a commons library was during my .NET 2 days - and it worked pretty well for applications that I built back then. I realized recently that I hadn&amp;rsquo;t really kept it up to date and as a result was not using it. So, I decided to scrap it and build something from scratch that would take advantage of the latest and the greatest that&amp;rsquo;s out there (that being .NET 4.5 as of now).&lt;/p></description></item><item><title>Introduction to NodeJS</title><link>https://aashishkoirala.com/blog/tech/introduction-to-nodejs/</link><pubDate>Thu, 12 Apr 2012 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/introduction-to-nodejs/</guid><description>&lt;p>I just ran into some presentation material from a Node.js introduction presentation I had done in a session that shall remain unnamed. I thought it would be a good idea to put it out there in case someone is starting out with Node, should they stumble on here. So, here it is.&lt;/p>
&lt;p>To quote &lt;a href="http://en.wikipedia.org/wiki/Nodejs">Wikipedia&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>A software system designed for writing scalable internet applications, notably web servers.&lt;/li>
&lt;li>Programs are written in JavaScript, using event-driven, asynchronous I/O to minimize overhead and maximize scalability.&lt;/li>
&lt;li>Consists of Google&amp;rsquo;s V8 JavaScript engine plus several built-in libraries.&lt;/li>
&lt;li>Created by Ryan Dahl starting in 2009; growth sponsored by Joyent, his employer.&lt;/li>
&lt;/ul>
&lt;p>The V8 JavaScript Engine is part of why Chrome is so fast. It compiles JavaScript to native code. It has a &amp;ldquo;stop-the-world&amp;rdquo; garbage collector that makes it more suitable for non-interactive applications. In Dahl&amp;rsquo;s words, V8 is a &amp;ldquo;beast&amp;rdquo; with all sorts of features (such as debugging). Node.js is a JavaScript library (compare to JRE or .NET framework) on top of the V8 JS Engine (compare to JVM or .NET CLR).&lt;/p></description></item><item><title>Automatic Resource Management in C#</title><link>https://aashishkoirala.com/blog/tech/automatic-resource-management-in-csharp/</link><pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/automatic-resource-management-in-csharp/</guid><description>&lt;p>Both the .NET framework and Java are garbage-collected systems. This means that when you instantiate objects, the framework keeps track of how the object is being referenced, and automatically frees up memory used by the object when it is no longer referenced by anything and is “out of scope”. This works beautifully with objects that are part of the framework. In .NET lingo, these are called “managed resources”. However, a lot of times, a .NET or Java application needs to talk to other systems external to the framework – such as databases, file systems, network sockets, graphics engines, and so on – i.e. “unmanaged resources”. In such cases, it is up to the programmer to handle allocation and de-allocation of resources. Framework classes that provide access to such resources will usually provide routines to close or dispose of resources. However, the programmer still needs to write boilerplate in order to do it and the boilerplate usually becomes cumbersome when you take into account things like exception handling.&lt;/p></description></item><item><title>PASS Summit 2011 Notes</title><link>https://aashishkoirala.com/blog/tech/pass-summit-2011-notes/</link><pubDate>Sat, 19 Nov 2011 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/tech/pass-summit-2011-notes/</guid><description>&lt;p>&lt;strong>PASS (Professional Association for SQL Server)&lt;/strong> is “an independent, user-led, not-for-profit organization co-founded by Microsoft and CA in 1999. PASS Summit is the world&amp;rsquo;s largest, most-focused, and most-intensive conference for Microsoft SQL Server and BI professionals.” (Source: the PASS website at &lt;a href="sqlpass.org">sqlpass.org&lt;/a>). The summit is held every year in Seattle. This year, the summit was held from October 11 to October 14 and focused on the upcoming RTM launch of SQL Server Denali, now re-branded as SQL Server 2012. The RTM will be released in the first half of 2012. Microsoft claims it is the biggest release of the SQL Server suite they have done so far with hundreds of enhancements. Some are general such as performance enhancements for the RDBMS as well as SSAS and SSIS. Another notable enhancement is that the cloud version of SQL Server (SQL Azure) is now built using the same codebase as the on-premise version. This write-up outlines some of the other enhancements that were highlighted at the summit.&lt;/p></description></item><item><title>Where the Crow Came to Die</title><link>https://aashishkoirala.com/blog/nontech/where-the-crow-came-to-die/</link><pubDate>Wed, 30 Jul 2008 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/blog/nontech/where-the-crow-came-to-die/</guid><description>&lt;p>I was running as fast as I could, but the yak kept gaining on me. All of a sudden, I found myself in my lodge room. I jumped on the bed, only to discover to my horror that the yak had made it to the room as well. With all its fury, the yak jumped on me. That is when I woke up from the vivid nightmare with cold sweat all over my body. Perfectly horizontal on the bed, my head felt fine. I couldn&amp;rsquo;t put a finger on it, but I knew that there was something that was not right with my body. I decided to get up for a quick trip to the latrine. As soon as I left the bed, the entire room started spinning around me. I could hardly stand or walk straight. That is when the troubling night began.&lt;/p></description></item><item><title>About Me</title><link>https://aashishkoirala.com/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aashishkoirala.com/about/</guid><description>&lt;p>I write code and build software both professionally and as a hobby. I am an introvert and love listening to classic metal and classic rock among other things. My interest in science and generally &amp;ldquo;knowing stuff&amp;rdquo; predates my interest in programming. Writing is a big passion, although I don&amp;rsquo;t do enough of it. I am a perennial Seinfeld fan. I am not into sports. I love movies, TV and books. Cosmic horror in particular is a favorite genre. I like to think I am an appreciator of good scotch, good beer and good coffee. I am a big fan and proponent of remote work and all the good it brings.&lt;/p></description></item></channel></rss>